

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Oct 28 11:03:18 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F1825
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	inittext,global,class=CODE,delta=2
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    42                           	dabs	1,0x7E,2
    43  0000                     
    44                           ; Version 2.20
    45                           ; Generated 12/02/2020 GMT
    46                           ; 
    47                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC16F1825 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0008                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000E                     	;# 
    92  0011                     	;# 
    93  0012                     	;# 
    94  0013                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  008C                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0093                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009B                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  010C                     	;# 
   123  010E                     	;# 
   124  0111                     	;# 
   125  0112                     	;# 
   126  0113                     	;# 
   127  0114                     	;# 
   128  0115                     	;# 
   129  0116                     	;# 
   130  0117                     	;# 
   131  0118                     	;# 
   132  0119                     	;# 
   133  011A                     	;# 
   134  011B                     	;# 
   135  011D                     	;# 
   136  011E                     	;# 
   137  018C                     	;# 
   138  018E                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0193                     	;# 
   145  0194                     	;# 
   146  0195                     	;# 
   147  0196                     	;# 
   148  0199                     	;# 
   149  019A                     	;# 
   150  019B                     	;# 
   151  019B                     	;# 
   152  019C                     	;# 
   153  019D                     	;# 
   154  019E                     	;# 
   155  019F                     	;# 
   156  020C                     	;# 
   157  020E                     	;# 
   158  0211                     	;# 
   159  0211                     	;# 
   160  0212                     	;# 
   161  0212                     	;# 
   162  0213                     	;# 
   163  0213                     	;# 
   164  0214                     	;# 
   165  0214                     	;# 
   166  0215                     	;# 
   167  0215                     	;# 
   168  0215                     	;# 
   169  0216                     	;# 
   170  0216                     	;# 
   171  0217                     	;# 
   172  0217                     	;# 
   173  0291                     	;# 
   174  0291                     	;# 
   175  0292                     	;# 
   176  0293                     	;# 
   177  0294                     	;# 
   178  0295                     	;# 
   179  0295                     	;# 
   180  0296                     	;# 
   181  0298                     	;# 
   182  0298                     	;# 
   183  0299                     	;# 
   184  029A                     	;# 
   185  029B                     	;# 
   186  029C                     	;# 
   187  029D                     	;# 
   188  029E                     	;# 
   189  0311                     	;# 
   190  0311                     	;# 
   191  0312                     	;# 
   192  0313                     	;# 
   193  0318                     	;# 
   194  0318                     	;# 
   195  0319                     	;# 
   196  031A                     	;# 
   197  038C                     	;# 
   198  038E                     	;# 
   199  0391                     	;# 
   200  0392                     	;# 
   201  0393                     	;# 
   202  039A                     	;# 
   203  039C                     	;# 
   204  039D                     	;# 
   205  039E                     	;# 
   206  039F                     	;# 
   207  0415                     	;# 
   208  0416                     	;# 
   209  0417                     	;# 
   210  041C                     	;# 
   211  041D                     	;# 
   212  041E                     	;# 
   213  0FE4                     	;# 
   214  0FE5                     	;# 
   215  0FE6                     	;# 
   216  0FE7                     	;# 
   217  0FE8                     	;# 
   218  0FE9                     	;# 
   219  0FEA                     	;# 
   220  0FEB                     	;# 
   221  0FED                     	;# 
   222  0FEE                     	;# 
   223  0FEF                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000E                     	;# 
   238  0011                     	;# 
   239  0012                     	;# 
   240  0013                     	;# 
   241  0015                     	;# 
   242  0016                     	;# 
   243  0016                     	;# 
   244  0017                     	;# 
   245  0018                     	;# 
   246  0019                     	;# 
   247  001A                     	;# 
   248  001B                     	;# 
   249  001C                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  008C                     	;# 
   253  008E                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0095                     	;# 
   258  0096                     	;# 
   259  0097                     	;# 
   260  0098                     	;# 
   261  0099                     	;# 
   262  009A                     	;# 
   263  009B                     	;# 
   264  009B                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  010C                     	;# 
   269  010E                     	;# 
   270  0111                     	;# 
   271  0112                     	;# 
   272  0113                     	;# 
   273  0114                     	;# 
   274  0115                     	;# 
   275  0116                     	;# 
   276  0117                     	;# 
   277  0118                     	;# 
   278  0119                     	;# 
   279  011A                     	;# 
   280  011B                     	;# 
   281  011D                     	;# 
   282  011E                     	;# 
   283  018C                     	;# 
   284  018E                     	;# 
   285  0191                     	;# 
   286  0191                     	;# 
   287  0192                     	;# 
   288  0193                     	;# 
   289  0193                     	;# 
   290  0193                     	;# 
   291  0194                     	;# 
   292  0195                     	;# 
   293  0196                     	;# 
   294  0199                     	;# 
   295  019A                     	;# 
   296  019B                     	;# 
   297  019B                     	;# 
   298  019C                     	;# 
   299  019D                     	;# 
   300  019E                     	;# 
   301  019F                     	;# 
   302  020C                     	;# 
   303  020E                     	;# 
   304  0211                     	;# 
   305  0211                     	;# 
   306  0212                     	;# 
   307  0212                     	;# 
   308  0213                     	;# 
   309  0213                     	;# 
   310  0214                     	;# 
   311  0214                     	;# 
   312  0215                     	;# 
   313  0215                     	;# 
   314  0215                     	;# 
   315  0216                     	;# 
   316  0216                     	;# 
   317  0217                     	;# 
   318  0217                     	;# 
   319  0291                     	;# 
   320  0291                     	;# 
   321  0292                     	;# 
   322  0293                     	;# 
   323  0294                     	;# 
   324  0295                     	;# 
   325  0295                     	;# 
   326  0296                     	;# 
   327  0298                     	;# 
   328  0298                     	;# 
   329  0299                     	;# 
   330  029A                     	;# 
   331  029B                     	;# 
   332  029C                     	;# 
   333  029D                     	;# 
   334  029E                     	;# 
   335  0311                     	;# 
   336  0311                     	;# 
   337  0312                     	;# 
   338  0313                     	;# 
   339  0318                     	;# 
   340  0318                     	;# 
   341  0319                     	;# 
   342  031A                     	;# 
   343  038C                     	;# 
   344  038E                     	;# 
   345  0391                     	;# 
   346  0392                     	;# 
   347  0393                     	;# 
   348  039A                     	;# 
   349  039C                     	;# 
   350  039D                     	;# 
   351  039E                     	;# 
   352  039F                     	;# 
   353  0415                     	;# 
   354  0416                     	;# 
   355  0417                     	;# 
   356  041C                     	;# 
   357  041D                     	;# 
   358  041E                     	;# 
   359  0FE4                     	;# 
   360  0FE5                     	;# 
   361  0FE6                     	;# 
   362  0FE7                     	;# 
   363  0FE8                     	;# 
   364  0FE9                     	;# 
   365  0FEA                     	;# 
   366  0FEB                     	;# 
   367  0FED                     	;# 
   368  0FEE                     	;# 
   369  0FEF                     	;# 
   370  0000                     	;# 
   371  0001                     	;# 
   372  0002                     	;# 
   373  0003                     	;# 
   374  0004                     	;# 
   375  0005                     	;# 
   376  0006                     	;# 
   377  0007                     	;# 
   378  0008                     	;# 
   379  0009                     	;# 
   380  000A                     	;# 
   381  000B                     	;# 
   382  000C                     	;# 
   383  000E                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0015                     	;# 
   388  0016                     	;# 
   389  0016                     	;# 
   390  0017                     	;# 
   391  0018                     	;# 
   392  0019                     	;# 
   393  001A                     	;# 
   394  001B                     	;# 
   395  001C                     	;# 
   396  001E                     	;# 
   397  001F                     	;# 
   398  008C                     	;# 
   399  008E                     	;# 
   400  0091                     	;# 
   401  0092                     	;# 
   402  0093                     	;# 
   403  0095                     	;# 
   404  0096                     	;# 
   405  0097                     	;# 
   406  0098                     	;# 
   407  0099                     	;# 
   408  009A                     	;# 
   409  009B                     	;# 
   410  009B                     	;# 
   411  009C                     	;# 
   412  009D                     	;# 
   413  009E                     	;# 
   414  010C                     	;# 
   415  010E                     	;# 
   416  0111                     	;# 
   417  0112                     	;# 
   418  0113                     	;# 
   419  0114                     	;# 
   420  0115                     	;# 
   421  0116                     	;# 
   422  0117                     	;# 
   423  0118                     	;# 
   424  0119                     	;# 
   425  011A                     	;# 
   426  011B                     	;# 
   427  011D                     	;# 
   428  011E                     	;# 
   429  018C                     	;# 
   430  018E                     	;# 
   431  0191                     	;# 
   432  0191                     	;# 
   433  0192                     	;# 
   434  0193                     	;# 
   435  0193                     	;# 
   436  0193                     	;# 
   437  0194                     	;# 
   438  0195                     	;# 
   439  0196                     	;# 
   440  0199                     	;# 
   441  019A                     	;# 
   442  019B                     	;# 
   443  019B                     	;# 
   444  019C                     	;# 
   445  019D                     	;# 
   446  019E                     	;# 
   447  019F                     	;# 
   448  020C                     	;# 
   449  020E                     	;# 
   450  0211                     	;# 
   451  0211                     	;# 
   452  0212                     	;# 
   453  0212                     	;# 
   454  0213                     	;# 
   455  0213                     	;# 
   456  0214                     	;# 
   457  0214                     	;# 
   458  0215                     	;# 
   459  0215                     	;# 
   460  0215                     	;# 
   461  0216                     	;# 
   462  0216                     	;# 
   463  0217                     	;# 
   464  0217                     	;# 
   465  0291                     	;# 
   466  0291                     	;# 
   467  0292                     	;# 
   468  0293                     	;# 
   469  0294                     	;# 
   470  0295                     	;# 
   471  0295                     	;# 
   472  0296                     	;# 
   473  0298                     	;# 
   474  0298                     	;# 
   475  0299                     	;# 
   476  029A                     	;# 
   477  029B                     	;# 
   478  029C                     	;# 
   479  029D                     	;# 
   480  029E                     	;# 
   481  0311                     	;# 
   482  0311                     	;# 
   483  0312                     	;# 
   484  0313                     	;# 
   485  0318                     	;# 
   486  0318                     	;# 
   487  0319                     	;# 
   488  031A                     	;# 
   489  038C                     	;# 
   490  038E                     	;# 
   491  0391                     	;# 
   492  0392                     	;# 
   493  0393                     	;# 
   494  039A                     	;# 
   495  039C                     	;# 
   496  039D                     	;# 
   497  039E                     	;# 
   498  039F                     	;# 
   499  0415                     	;# 
   500  0416                     	;# 
   501  0417                     	;# 
   502  041C                     	;# 
   503  041D                     	;# 
   504  041E                     	;# 
   505  0FE4                     	;# 
   506  0FE5                     	;# 
   507  0FE6                     	;# 
   508  0FE7                     	;# 
   509  0FE8                     	;# 
   510  0FE9                     	;# 
   511  0FEA                     	;# 
   512  0FEB                     	;# 
   513  0FED                     	;# 
   514  0FEE                     	;# 
   515  0FEF                     	;# 
   516  0000                     	;# 
   517  0001                     	;# 
   518  0002                     	;# 
   519  0003                     	;# 
   520  0004                     	;# 
   521  0005                     	;# 
   522  0006                     	;# 
   523  0007                     	;# 
   524  0008                     	;# 
   525  0009                     	;# 
   526  000A                     	;# 
   527  000B                     	;# 
   528  000C                     	;# 
   529  000E                     	;# 
   530  0011                     	;# 
   531  0012                     	;# 
   532  0013                     	;# 
   533  0015                     	;# 
   534  0016                     	;# 
   535  0016                     	;# 
   536  0017                     	;# 
   537  0018                     	;# 
   538  0019                     	;# 
   539  001A                     	;# 
   540  001B                     	;# 
   541  001C                     	;# 
   542  001E                     	;# 
   543  001F                     	;# 
   544  008C                     	;# 
   545  008E                     	;# 
   546  0091                     	;# 
   547  0092                     	;# 
   548  0093                     	;# 
   549  0095                     	;# 
   550  0096                     	;# 
   551  0097                     	;# 
   552  0098                     	;# 
   553  0099                     	;# 
   554  009A                     	;# 
   555  009B                     	;# 
   556  009B                     	;# 
   557  009C                     	;# 
   558  009D                     	;# 
   559  009E                     	;# 
   560  010C                     	;# 
   561  010E                     	;# 
   562  0111                     	;# 
   563  0112                     	;# 
   564  0113                     	;# 
   565  0114                     	;# 
   566  0115                     	;# 
   567  0116                     	;# 
   568  0117                     	;# 
   569  0118                     	;# 
   570  0119                     	;# 
   571  011A                     	;# 
   572  011B                     	;# 
   573  011D                     	;# 
   574  011E                     	;# 
   575  018C                     	;# 
   576  018E                     	;# 
   577  0191                     	;# 
   578  0191                     	;# 
   579  0192                     	;# 
   580  0193                     	;# 
   581  0193                     	;# 
   582  0193                     	;# 
   583  0194                     	;# 
   584  0195                     	;# 
   585  0196                     	;# 
   586  0199                     	;# 
   587  019A                     	;# 
   588  019B                     	;# 
   589  019B                     	;# 
   590  019C                     	;# 
   591  019D                     	;# 
   592  019E                     	;# 
   593  019F                     	;# 
   594  020C                     	;# 
   595  020E                     	;# 
   596  0211                     	;# 
   597  0211                     	;# 
   598  0212                     	;# 
   599  0212                     	;# 
   600  0213                     	;# 
   601  0213                     	;# 
   602  0214                     	;# 
   603  0214                     	;# 
   604  0215                     	;# 
   605  0215                     	;# 
   606  0215                     	;# 
   607  0216                     	;# 
   608  0216                     	;# 
   609  0217                     	;# 
   610  0217                     	;# 
   611  0291                     	;# 
   612  0291                     	;# 
   613  0292                     	;# 
   614  0293                     	;# 
   615  0294                     	;# 
   616  0295                     	;# 
   617  0295                     	;# 
   618  0296                     	;# 
   619  0298                     	;# 
   620  0298                     	;# 
   621  0299                     	;# 
   622  029A                     	;# 
   623  029B                     	;# 
   624  029C                     	;# 
   625  029D                     	;# 
   626  029E                     	;# 
   627  0311                     	;# 
   628  0311                     	;# 
   629  0312                     	;# 
   630  0313                     	;# 
   631  0318                     	;# 
   632  0318                     	;# 
   633  0319                     	;# 
   634  031A                     	;# 
   635  038C                     	;# 
   636  038E                     	;# 
   637  0391                     	;# 
   638  0392                     	;# 
   639  0393                     	;# 
   640  039A                     	;# 
   641  039C                     	;# 
   642  039D                     	;# 
   643  039E                     	;# 
   644  039F                     	;# 
   645  0415                     	;# 
   646  0416                     	;# 
   647  0417                     	;# 
   648  041C                     	;# 
   649  041D                     	;# 
   650  041E                     	;# 
   651  0FE4                     	;# 
   652  0FE5                     	;# 
   653  0FE6                     	;# 
   654  0FE7                     	;# 
   655  0FE8                     	;# 
   656  0FE9                     	;# 
   657  0FEA                     	;# 
   658  0FEB                     	;# 
   659  0FED                     	;# 
   660  0FEE                     	;# 
   661  0FEF                     	;# 
   662  0000                     	;# 
   663  0001                     	;# 
   664  0002                     	;# 
   665  0003                     	;# 
   666  0004                     	;# 
   667  0005                     	;# 
   668  0006                     	;# 
   669  0007                     	;# 
   670  0008                     	;# 
   671  0009                     	;# 
   672  000A                     	;# 
   673  000B                     	;# 
   674  000C                     	;# 
   675  000E                     	;# 
   676  0011                     	;# 
   677  0012                     	;# 
   678  0013                     	;# 
   679  0015                     	;# 
   680  0016                     	;# 
   681  0016                     	;# 
   682  0017                     	;# 
   683  0018                     	;# 
   684  0019                     	;# 
   685  001A                     	;# 
   686  001B                     	;# 
   687  001C                     	;# 
   688  001E                     	;# 
   689  001F                     	;# 
   690  008C                     	;# 
   691  008E                     	;# 
   692  0091                     	;# 
   693  0092                     	;# 
   694  0093                     	;# 
   695  0095                     	;# 
   696  0096                     	;# 
   697  0097                     	;# 
   698  0098                     	;# 
   699  0099                     	;# 
   700  009A                     	;# 
   701  009B                     	;# 
   702  009B                     	;# 
   703  009C                     	;# 
   704  009D                     	;# 
   705  009E                     	;# 
   706  010C                     	;# 
   707  010E                     	;# 
   708  0111                     	;# 
   709  0112                     	;# 
   710  0113                     	;# 
   711  0114                     	;# 
   712  0115                     	;# 
   713  0116                     	;# 
   714  0117                     	;# 
   715  0118                     	;# 
   716  0119                     	;# 
   717  011A                     	;# 
   718  011B                     	;# 
   719  011D                     	;# 
   720  011E                     	;# 
   721  018C                     	;# 
   722  018E                     	;# 
   723  0191                     	;# 
   724  0191                     	;# 
   725  0192                     	;# 
   726  0193                     	;# 
   727  0193                     	;# 
   728  0193                     	;# 
   729  0194                     	;# 
   730  0195                     	;# 
   731  0196                     	;# 
   732  0199                     	;# 
   733  019A                     	;# 
   734  019B                     	;# 
   735  019B                     	;# 
   736  019C                     	;# 
   737  019D                     	;# 
   738  019E                     	;# 
   739  019F                     	;# 
   740  020C                     	;# 
   741  020E                     	;# 
   742  0211                     	;# 
   743  0211                     	;# 
   744  0212                     	;# 
   745  0212                     	;# 
   746  0213                     	;# 
   747  0213                     	;# 
   748  0214                     	;# 
   749  0214                     	;# 
   750  0215                     	;# 
   751  0215                     	;# 
   752  0215                     	;# 
   753  0216                     	;# 
   754  0216                     	;# 
   755  0217                     	;# 
   756  0217                     	;# 
   757  0291                     	;# 
   758  0291                     	;# 
   759  0292                     	;# 
   760  0293                     	;# 
   761  0294                     	;# 
   762  0295                     	;# 
   763  0295                     	;# 
   764  0296                     	;# 
   765  0298                     	;# 
   766  0298                     	;# 
   767  0299                     	;# 
   768  029A                     	;# 
   769  029B                     	;# 
   770  029C                     	;# 
   771  029D                     	;# 
   772  029E                     	;# 
   773  0311                     	;# 
   774  0311                     	;# 
   775  0312                     	;# 
   776  0313                     	;# 
   777  0318                     	;# 
   778  0318                     	;# 
   779  0319                     	;# 
   780  031A                     	;# 
   781  038C                     	;# 
   782  038E                     	;# 
   783  0391                     	;# 
   784  0392                     	;# 
   785  0393                     	;# 
   786  039A                     	;# 
   787  039C                     	;# 
   788  039D                     	;# 
   789  039E                     	;# 
   790  039F                     	;# 
   791  0415                     	;# 
   792  0416                     	;# 
   793  0417                     	;# 
   794  041C                     	;# 
   795  041D                     	;# 
   796  041E                     	;# 
   797  0FE4                     	;# 
   798  0FE5                     	;# 
   799  0FE6                     	;# 
   800  0FE7                     	;# 
   801  0FE8                     	;# 
   802  0FE9                     	;# 
   803  0FEA                     	;# 
   804  0FEB                     	;# 
   805  0FED                     	;# 
   806  0FEE                     	;# 
   807  0FEF                     	;# 
   808  0000                     	;# 
   809  0001                     	;# 
   810  0002                     	;# 
   811  0003                     	;# 
   812  0004                     	;# 
   813  0005                     	;# 
   814  0006                     	;# 
   815  0007                     	;# 
   816  0008                     	;# 
   817  0009                     	;# 
   818  000A                     	;# 
   819  000B                     	;# 
   820  000C                     	;# 
   821  000E                     	;# 
   822  0011                     	;# 
   823  0012                     	;# 
   824  0013                     	;# 
   825  0015                     	;# 
   826  0016                     	;# 
   827  0016                     	;# 
   828  0017                     	;# 
   829  0018                     	;# 
   830  0019                     	;# 
   831  001A                     	;# 
   832  001B                     	;# 
   833  001C                     	;# 
   834  001E                     	;# 
   835  001F                     	;# 
   836  008C                     	;# 
   837  008E                     	;# 
   838  0091                     	;# 
   839  0092                     	;# 
   840  0093                     	;# 
   841  0095                     	;# 
   842  0096                     	;# 
   843  0097                     	;# 
   844  0098                     	;# 
   845  0099                     	;# 
   846  009A                     	;# 
   847  009B                     	;# 
   848  009B                     	;# 
   849  009C                     	;# 
   850  009D                     	;# 
   851  009E                     	;# 
   852  010C                     	;# 
   853  010E                     	;# 
   854  0111                     	;# 
   855  0112                     	;# 
   856  0113                     	;# 
   857  0114                     	;# 
   858  0115                     	;# 
   859  0116                     	;# 
   860  0117                     	;# 
   861  0118                     	;# 
   862  0119                     	;# 
   863  011A                     	;# 
   864  011B                     	;# 
   865  011D                     	;# 
   866  011E                     	;# 
   867  018C                     	;# 
   868  018E                     	;# 
   869  0191                     	;# 
   870  0191                     	;# 
   871  0192                     	;# 
   872  0193                     	;# 
   873  0193                     	;# 
   874  0193                     	;# 
   875  0194                     	;# 
   876  0195                     	;# 
   877  0196                     	;# 
   878  0199                     	;# 
   879  019A                     	;# 
   880  019B                     	;# 
   881  019B                     	;# 
   882  019C                     	;# 
   883  019D                     	;# 
   884  019E                     	;# 
   885  019F                     	;# 
   886  020C                     	;# 
   887  020E                     	;# 
   888  0211                     	;# 
   889  0211                     	;# 
   890  0212                     	;# 
   891  0212                     	;# 
   892  0213                     	;# 
   893  0213                     	;# 
   894  0214                     	;# 
   895  0214                     	;# 
   896  0215                     	;# 
   897  0215                     	;# 
   898  0215                     	;# 
   899  0216                     	;# 
   900  0216                     	;# 
   901  0217                     	;# 
   902  0217                     	;# 
   903  0291                     	;# 
   904  0291                     	;# 
   905  0292                     	;# 
   906  0293                     	;# 
   907  0294                     	;# 
   908  0295                     	;# 
   909  0295                     	;# 
   910  0296                     	;# 
   911  0298                     	;# 
   912  0298                     	;# 
   913  0299                     	;# 
   914  029A                     	;# 
   915  029B                     	;# 
   916  029C                     	;# 
   917  029D                     	;# 
   918  029E                     	;# 
   919  0311                     	;# 
   920  0311                     	;# 
   921  0312                     	;# 
   922  0313                     	;# 
   923  0318                     	;# 
   924  0318                     	;# 
   925  0319                     	;# 
   926  031A                     	;# 
   927  038C                     	;# 
   928  038E                     	;# 
   929  0391                     	;# 
   930  0392                     	;# 
   931  0393                     	;# 
   932  039A                     	;# 
   933  039C                     	;# 
   934  039D                     	;# 
   935  039E                     	;# 
   936  039F                     	;# 
   937  0415                     	;# 
   938  0416                     	;# 
   939  0417                     	;# 
   940  041C                     	;# 
   941  041D                     	;# 
   942  041E                     	;# 
   943  0FE4                     	;# 
   944  0FE5                     	;# 
   945  0FE6                     	;# 
   946  0FE7                     	;# 
   947  0FE8                     	;# 
   948  0FE9                     	;# 
   949  0FEA                     	;# 
   950  0FEB                     	;# 
   951  0FED                     	;# 
   952  0FEE                     	;# 
   953  0FEF                     	;# 
   954  0000                     	;# 
   955  0001                     	;# 
   956  0002                     	;# 
   957  0003                     	;# 
   958  0004                     	;# 
   959  0005                     	;# 
   960  0006                     	;# 
   961  0007                     	;# 
   962  0008                     	;# 
   963  0009                     	;# 
   964  000A                     	;# 
   965  000B                     	;# 
   966  000C                     	;# 
   967  000E                     	;# 
   968  0011                     	;# 
   969  0012                     	;# 
   970  0013                     	;# 
   971  0015                     	;# 
   972  0016                     	;# 
   973  0016                     	;# 
   974  0017                     	;# 
   975  0018                     	;# 
   976  0019                     	;# 
   977  001A                     	;# 
   978  001B                     	;# 
   979  001C                     	;# 
   980  001E                     	;# 
   981  001F                     	;# 
   982  008C                     	;# 
   983  008E                     	;# 
   984  0091                     	;# 
   985  0092                     	;# 
   986  0093                     	;# 
   987  0095                     	;# 
   988  0096                     	;# 
   989  0097                     	;# 
   990  0098                     	;# 
   991  0099                     	;# 
   992  009A                     	;# 
   993  009B                     	;# 
   994  009B                     	;# 
   995  009C                     	;# 
   996  009D                     	;# 
   997  009E                     	;# 
   998  010C                     	;# 
   999  010E                     	;# 
  1000  0111                     	;# 
  1001  0112                     	;# 
  1002  0113                     	;# 
  1003  0114                     	;# 
  1004  0115                     	;# 
  1005  0116                     	;# 
  1006  0117                     	;# 
  1007  0118                     	;# 
  1008  0119                     	;# 
  1009  011A                     	;# 
  1010  011B                     	;# 
  1011  011D                     	;# 
  1012  011E                     	;# 
  1013  018C                     	;# 
  1014  018E                     	;# 
  1015  0191                     	;# 
  1016  0191                     	;# 
  1017  0192                     	;# 
  1018  0193                     	;# 
  1019  0193                     	;# 
  1020  0193                     	;# 
  1021  0194                     	;# 
  1022  0195                     	;# 
  1023  0196                     	;# 
  1024  0199                     	;# 
  1025  019A                     	;# 
  1026  019B                     	;# 
  1027  019B                     	;# 
  1028  019C                     	;# 
  1029  019D                     	;# 
  1030  019E                     	;# 
  1031  019F                     	;# 
  1032  020C                     	;# 
  1033  020E                     	;# 
  1034  0211                     	;# 
  1035  0211                     	;# 
  1036  0212                     	;# 
  1037  0212                     	;# 
  1038  0213                     	;# 
  1039  0213                     	;# 
  1040  0214                     	;# 
  1041  0214                     	;# 
  1042  0215                     	;# 
  1043  0215                     	;# 
  1044  0215                     	;# 
  1045  0216                     	;# 
  1046  0216                     	;# 
  1047  0217                     	;# 
  1048  0217                     	;# 
  1049  0291                     	;# 
  1050  0291                     	;# 
  1051  0292                     	;# 
  1052  0293                     	;# 
  1053  0294                     	;# 
  1054  0295                     	;# 
  1055  0295                     	;# 
  1056  0296                     	;# 
  1057  0298                     	;# 
  1058  0298                     	;# 
  1059  0299                     	;# 
  1060  029A                     	;# 
  1061  029B                     	;# 
  1062  029C                     	;# 
  1063  029D                     	;# 
  1064  029E                     	;# 
  1065  0311                     	;# 
  1066  0311                     	;# 
  1067  0312                     	;# 
  1068  0313                     	;# 
  1069  0318                     	;# 
  1070  0318                     	;# 
  1071  0319                     	;# 
  1072  031A                     	;# 
  1073  038C                     	;# 
  1074  038E                     	;# 
  1075  0391                     	;# 
  1076  0392                     	;# 
  1077  0393                     	;# 
  1078  039A                     	;# 
  1079  039C                     	;# 
  1080  039D                     	;# 
  1081  039E                     	;# 
  1082  039F                     	;# 
  1083  0415                     	;# 
  1084  0416                     	;# 
  1085  0417                     	;# 
  1086  041C                     	;# 
  1087  041D                     	;# 
  1088  041E                     	;# 
  1089  0FE4                     	;# 
  1090  0FE5                     	;# 
  1091  0FE6                     	;# 
  1092  0FE7                     	;# 
  1093  0FE8                     	;# 
  1094  0FE9                     	;# 
  1095  0FEA                     	;# 
  1096  0FEB                     	;# 
  1097  0FED                     	;# 
  1098  0FEE                     	;# 
  1099  0FEF                     	;# 
  1100  0000                     	;# 
  1101  0001                     	;# 
  1102  0002                     	;# 
  1103  0003                     	;# 
  1104  0004                     	;# 
  1105  0005                     	;# 
  1106  0006                     	;# 
  1107  0007                     	;# 
  1108  0008                     	;# 
  1109  0009                     	;# 
  1110  000A                     	;# 
  1111  000B                     	;# 
  1112  000C                     	;# 
  1113  000E                     	;# 
  1114  0011                     	;# 
  1115  0012                     	;# 
  1116  0013                     	;# 
  1117  0015                     	;# 
  1118  0016                     	;# 
  1119  0016                     	;# 
  1120  0017                     	;# 
  1121  0018                     	;# 
  1122  0019                     	;# 
  1123  001A                     	;# 
  1124  001B                     	;# 
  1125  001C                     	;# 
  1126  001E                     	;# 
  1127  001F                     	;# 
  1128  008C                     	;# 
  1129  008E                     	;# 
  1130  0091                     	;# 
  1131  0092                     	;# 
  1132  0093                     	;# 
  1133  0095                     	;# 
  1134  0096                     	;# 
  1135  0097                     	;# 
  1136  0098                     	;# 
  1137  0099                     	;# 
  1138  009A                     	;# 
  1139  009B                     	;# 
  1140  009B                     	;# 
  1141  009C                     	;# 
  1142  009D                     	;# 
  1143  009E                     	;# 
  1144  010C                     	;# 
  1145  010E                     	;# 
  1146  0111                     	;# 
  1147  0112                     	;# 
  1148  0113                     	;# 
  1149  0114                     	;# 
  1150  0115                     	;# 
  1151  0116                     	;# 
  1152  0117                     	;# 
  1153  0118                     	;# 
  1154  0119                     	;# 
  1155  011A                     	;# 
  1156  011B                     	;# 
  1157  011D                     	;# 
  1158  011E                     	;# 
  1159  018C                     	;# 
  1160  018E                     	;# 
  1161  0191                     	;# 
  1162  0191                     	;# 
  1163  0192                     	;# 
  1164  0193                     	;# 
  1165  0193                     	;# 
  1166  0193                     	;# 
  1167  0194                     	;# 
  1168  0195                     	;# 
  1169  0196                     	;# 
  1170  0199                     	;# 
  1171  019A                     	;# 
  1172  019B                     	;# 
  1173  019B                     	;# 
  1174  019C                     	;# 
  1175  019D                     	;# 
  1176  019E                     	;# 
  1177  019F                     	;# 
  1178  020C                     	;# 
  1179  020E                     	;# 
  1180  0211                     	;# 
  1181  0211                     	;# 
  1182  0212                     	;# 
  1183  0212                     	;# 
  1184  0213                     	;# 
  1185  0213                     	;# 
  1186  0214                     	;# 
  1187  0214                     	;# 
  1188  0215                     	;# 
  1189  0215                     	;# 
  1190  0215                     	;# 
  1191  0216                     	;# 
  1192  0216                     	;# 
  1193  0217                     	;# 
  1194  0217                     	;# 
  1195  0291                     	;# 
  1196  0291                     	;# 
  1197  0292                     	;# 
  1198  0293                     	;# 
  1199  0294                     	;# 
  1200  0295                     	;# 
  1201  0295                     	;# 
  1202  0296                     	;# 
  1203  0298                     	;# 
  1204  0298                     	;# 
  1205  0299                     	;# 
  1206  029A                     	;# 
  1207  029B                     	;# 
  1208  029C                     	;# 
  1209  029D                     	;# 
  1210  029E                     	;# 
  1211  0311                     	;# 
  1212  0311                     	;# 
  1213  0312                     	;# 
  1214  0313                     	;# 
  1215  0318                     	;# 
  1216  0318                     	;# 
  1217  0319                     	;# 
  1218  031A                     	;# 
  1219  038C                     	;# 
  1220  038E                     	;# 
  1221  0391                     	;# 
  1222  0392                     	;# 
  1223  0393                     	;# 
  1224  039A                     	;# 
  1225  039C                     	;# 
  1226  039D                     	;# 
  1227  039E                     	;# 
  1228  039F                     	;# 
  1229  0415                     	;# 
  1230  0416                     	;# 
  1231  0417                     	;# 
  1232  041C                     	;# 
  1233  041D                     	;# 
  1234  041E                     	;# 
  1235  0FE4                     	;# 
  1236  0FE5                     	;# 
  1237  0FE6                     	;# 
  1238  0FE7                     	;# 
  1239  0FE8                     	;# 
  1240  0FE9                     	;# 
  1241  0FEA                     	;# 
  1242  0FEB                     	;# 
  1243  0FED                     	;# 
  1244  0FEE                     	;# 
  1245  0FEF                     	;# 
  1246  0000                     	;# 
  1247  0001                     	;# 
  1248  0002                     	;# 
  1249  0003                     	;# 
  1250  0004                     	;# 
  1251  0005                     	;# 
  1252  0006                     	;# 
  1253  0007                     	;# 
  1254  0008                     	;# 
  1255  0009                     	;# 
  1256  000A                     	;# 
  1257  000B                     	;# 
  1258  000C                     	;# 
  1259  000E                     	;# 
  1260  0011                     	;# 
  1261  0012                     	;# 
  1262  0013                     	;# 
  1263  0015                     	;# 
  1264  0016                     	;# 
  1265  0016                     	;# 
  1266  0017                     	;# 
  1267  0018                     	;# 
  1268  0019                     	;# 
  1269  001A                     	;# 
  1270  001B                     	;# 
  1271  001C                     	;# 
  1272  001E                     	;# 
  1273  001F                     	;# 
  1274  008C                     	;# 
  1275  008E                     	;# 
  1276  0091                     	;# 
  1277  0092                     	;# 
  1278  0093                     	;# 
  1279  0095                     	;# 
  1280  0096                     	;# 
  1281  0097                     	;# 
  1282  0098                     	;# 
  1283  0099                     	;# 
  1284  009A                     	;# 
  1285  009B                     	;# 
  1286  009B                     	;# 
  1287  009C                     	;# 
  1288  009D                     	;# 
  1289  009E                     	;# 
  1290  010C                     	;# 
  1291  010E                     	;# 
  1292  0111                     	;# 
  1293  0112                     	;# 
  1294  0113                     	;# 
  1295  0114                     	;# 
  1296  0115                     	;# 
  1297  0116                     	;# 
  1298  0117                     	;# 
  1299  0118                     	;# 
  1300  0119                     	;# 
  1301  011A                     	;# 
  1302  011B                     	;# 
  1303  011D                     	;# 
  1304  011E                     	;# 
  1305  018C                     	;# 
  1306  018E                     	;# 
  1307  0191                     	;# 
  1308  0191                     	;# 
  1309  0192                     	;# 
  1310  0193                     	;# 
  1311  0193                     	;# 
  1312  0193                     	;# 
  1313  0194                     	;# 
  1314  0195                     	;# 
  1315  0196                     	;# 
  1316  0199                     	;# 
  1317  019A                     	;# 
  1318  019B                     	;# 
  1319  019B                     	;# 
  1320  019C                     	;# 
  1321  019D                     	;# 
  1322  019E                     	;# 
  1323  019F                     	;# 
  1324  020C                     	;# 
  1325  020E                     	;# 
  1326  0211                     	;# 
  1327  0211                     	;# 
  1328  0212                     	;# 
  1329  0212                     	;# 
  1330  0213                     	;# 
  1331  0213                     	;# 
  1332  0214                     	;# 
  1333  0214                     	;# 
  1334  0215                     	;# 
  1335  0215                     	;# 
  1336  0215                     	;# 
  1337  0216                     	;# 
  1338  0216                     	;# 
  1339  0217                     	;# 
  1340  0217                     	;# 
  1341  0291                     	;# 
  1342  0291                     	;# 
  1343  0292                     	;# 
  1344  0293                     	;# 
  1345  0294                     	;# 
  1346  0295                     	;# 
  1347  0295                     	;# 
  1348  0296                     	;# 
  1349  0298                     	;# 
  1350  0298                     	;# 
  1351  0299                     	;# 
  1352  029A                     	;# 
  1353  029B                     	;# 
  1354  029C                     	;# 
  1355  029D                     	;# 
  1356  029E                     	;# 
  1357  0311                     	;# 
  1358  0311                     	;# 
  1359  0312                     	;# 
  1360  0313                     	;# 
  1361  0318                     	;# 
  1362  0318                     	;# 
  1363  0319                     	;# 
  1364  031A                     	;# 
  1365  038C                     	;# 
  1366  038E                     	;# 
  1367  0391                     	;# 
  1368  0392                     	;# 
  1369  0393                     	;# 
  1370  039A                     	;# 
  1371  039C                     	;# 
  1372  039D                     	;# 
  1373  039E                     	;# 
  1374  039F                     	;# 
  1375  0415                     	;# 
  1376  0416                     	;# 
  1377  0417                     	;# 
  1378  041C                     	;# 
  1379  041D                     	;# 
  1380  041E                     	;# 
  1381  0FE4                     	;# 
  1382  0FE5                     	;# 
  1383  0FE6                     	;# 
  1384  0FE7                     	;# 
  1385  0FE8                     	;# 
  1386  0FE9                     	;# 
  1387  0FEA                     	;# 
  1388  0FEB                     	;# 
  1389  0FED                     	;# 
  1390  0FEE                     	;# 
  1391  0FEF                     	;# 
  1392                           
  1393 ;; Function _ADC_SelectChannel is unused but had its address taken
  1394  0000                     
  1395 ;; Function _ADC_StartConversion is unused but had its address taken
  1396  0000                     
  1397 ;; Function i1_ADC_SelectChannel is unused but had its address taken
  1398  0000                     
  1399                           	psect	idataCOMMON
  1400  043C                     __pidataCOMMON:
  1401                           
  1402                           ;initializer for _isReadingTemp
  1403  043C  3401               	retlw	1
  1404                           
  1405                           	psect	idataBANK0
  1406  0341                     __pidataBANK0:
  1407                           
  1408                           ;initializer for _self
  1409  0341  3400               	retlw	0
  1410  0342  3400               	retlw	0
  1411  0343  3400               	retlw	0
  1412  0344  3400               	retlw	0
  1413  0345  340D               	retlw	low _read
  1414  0346  3403               	retlw	high _read
  1415  0347  3437               	retlw	low _init
  1416  0348  3404               	retlw	high _init
  1417  0349  3400               	retlw	0
  1418  034A  3400               	retlw	0
  1419  034B  3400               	retlw	0
  1420  034C  3400               	retlw	0
  1421  034D  3400               	retlw	0
  1422  034E  3400               	retlw	0
  1423  034F  3400               	retlw	0
  1424  0350  3400               	retlw	0
  1425  0351  3400               	retlw	0
  1426                           
  1427                           ;initializer for _instance
  1428  0352  3400               	retlw	0
  1429  0353  3400               	retlw	0
  1430  0354  3400               	retlw	0
  1431  0355  3400               	retlw	0
  1432  0356  3400               	retlw	0
  1433  0357  3400               	retlw	0
  1434  0358  3400               	retlw	0
  1435  0359  3400               	retlw	0
  1436  035A  34F7               	retlw	low _incCurrentTimeMillis
  1437  035B  3403               	retlw	high _incCurrentTimeMillis
  1438                           
  1439                           	psect	nvBANK0
  1440  006A                     __pnvBANK0:
  1441  006A                     _TMR1_InterruptHandler:
  1442  006A                     	ds	2
  1443  006C                     _timer1ReloadVal:
  1444  006C                     	ds	2
  1445  006E                     _ADC_InterruptHandler:
  1446  006E                     	ds	2
  1447  0019                     _T1GCONbits	set	25
  1448  0018                     _T1CONbits	set	24
  1449  0018                     _T1CON	set	24
  1450  0016                     _TMR1L	set	22
  1451  0017                     _TMR1H	set	23
  1452  0019                     _T1GCON	set	25
  1453  000B                     _INTCONbits	set	11
  1454  0011                     _PIR1bits	set	17
  1455  0097                     _WDTCON	set	151
  1456  0098                     _OSCTUNE	set	152
  1457  0099                     _OSCCON	set	153
  1458  009D                     _ADCON0bits	set	157
  1459  0091                     _PIE1bits	set	145
  1460  009D                     _ADCON0	set	157
  1461  009C                     _ADRESH	set	156
  1462  009B                     _ADRESL	set	155
  1463  009E                     _ADCON1	set	158
  1464  0095                     _OPTION_REGbits	set	149
  1465  008E                     _TRISC	set	142
  1466  008C                     _TRISA	set	140
  1467  010E                     _LATCbits	set	270
  1468  0116                     _BORCON	set	278
  1469  011E                     _APFCON1	set	286
  1470  011D                     _APFCON0	set	285
  1471  010E                     _LATC	set	270
  1472  010C                     _LATA	set	268
  1473  018C                     _ANSELA	set	396
  1474  018E                     _ANSELC	set	398
  1475  020E                     _WPUC	set	526
  1476  020C                     _WPUA	set	524
  1477                           
  1478                           	psect	cinit
  1479  002A                     start_initialization:	
  1480                           ; #config settings
  1481                           
  1482  002A                     __initialization:
  1483                           
  1484                           ; Initialize objects allocated to COMMON
  1485  002A  3184  243C  3180   	fcall	__pidataCOMMON	;fetch initializer
  1486  002D  00FA               	movwf	__pdataCOMMON& (0+127)
  1487                           
  1488                           ; Initialize objects allocated to BANK0
  1489  002E  3041               	movlw	low __pidataBANK0
  1490  002F  0084               	movwf	4
  1491  0030  3083               	movlw	(high __pidataBANK0)| (0+128)
  1492  0031  0085               	movwf	5
  1493  0032  304F               	movlw	low __pdataBANK0
  1494  0033  0086               	movwf	6
  1495  0034  3000               	movlw	high __pdataBANK0
  1496  0035  0087               	movwf	7
  1497  0036  301B               	movlw	27
  1498  0037  3184  2415  3180   	fcall	init_ram
  1499                           
  1500                           ; Clear objects allocated to COMMON
  1501  003A  01F0               	clrf	__pbssCOMMON& (0+127)
  1502  003B  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1503  003C  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1504  003D  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1505  003E  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1506  003F  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  1507                           
  1508                           ; Clear objects allocated to BANK1
  1509  0040  30A0               	movlw	low __pbssBANK1
  1510  0041  0084               	movwf	4
  1511  0042  3000               	movlw	high __pbssBANK1
  1512  0043  0085               	movwf	5
  1513  0044  3024               	movlw	36
  1514  0045  3184  241B  3180   	fcall	clear_ram0
  1515  0048                     end_of_initialization:	
  1516                           ;End of C runtime variable initialization code
  1517                           
  1518  0048                     __end_of__initialization:
  1519  0048  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1520  0049  0020               	movlb	0
  1521  004A  3184  2C03         	ljmp	_main	;jump to C main() function
  1522                           
  1523                           	psect	bssCOMMON
  1524  0070                     __pbssCOMMON:
  1525  0070                     _cronometer:
  1526  0070                     	ds	2
  1527  0072                     _timer@Sensor$F674:
  1528  0072                     	ds	1
  1529  0073                     _adc:
  1530  0073                     	ds	1
  1531  0074                     _timer:
  1532  0074                     	ds	1
  1533  0075                     _state:
  1534  0075                     	ds	1
  1535                           
  1536                           	psect	dataCOMMON
  1537  007A                     __pdataCOMMON:
  1538  007A                     _isReadingTemp:
  1539  007A                     	ds	1
  1540                           
  1541                           	psect	dataBANK0
  1542  004F                     __pdataBANK0:
  1543  004F                     _self:
  1544  004F                     	ds	17
  1545  0060                     _instance:
  1546  0060                     	ds	10
  1547                           
  1548                           	psect	bssBANK1
  1549  00A0                     __pbssBANK1:
  1550  00A0                     NewSensor@F69:
  1551  00A0                     	ds	12
  1552  00AC                     _ampSensor:
  1553  00AC                     	ds	12
  1554  00B8                     _temperatureSensor:
  1555  00B8                     	ds	12
  1556                           
  1557                           	psect	inittext
  1558  0415                     init_ram:
  1559  0415  00FE               	movwf	btemp
  1560  0416                     initloop:
  1561  0416  0012               	moviw fsr0++
  1562  0417  001E               	movwi fsr1++
  1563  0418  0BFE               	decfsz	btemp,f
  1564  0419  2C16               	goto	initloop
  1565  041A  3400               	retlw	0
  1566                           
  1567                           	psect	clrtext
  1568  041B                     clear_ram0:	
  1569                           ;	Called with FSR0 containing the base address, and
  1570                           ;	WREG with the size to clear
  1571                           
  1572  041B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1573  041C                     clrloop0:
  1574  041C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1575  041D  3101               	addfsr 0,1
  1576  041E  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1577  041F  2C1C               	goto	clrloop0	;have we reached the end yet?
  1578  0420  3400               	retlw	0	;all done for this memory range, return
  1579                           
  1580                           	psect	cstackCOMMON
  1581  0076                     __pcstackCOMMON:
  1582  0076                     ?_ADC_DefaultInterruptHandler:
  1583  0076                     ??_ADC_DefaultInterruptHandler:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0076                     ?_TMR1_ISR:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0076                     ?_TMR1_DefaultInterruptHandler:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0076                     ??_TMR1_DefaultInterruptHandler:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0076                     ?_TMR1_CallBack:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0076                     ??_TMR1_CallBack:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0076                     ?_OSCILLATOR_Initialize:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0076                     ?_WDT_Initialize:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0076                     ?_tasks:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0076                     ?_incCurrentTimeMillis:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0076                     ??_incCurrentTimeMillis:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0076                     ?_GetTimeSystemInstance:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0076                     ?_read:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0076                     ?_init:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0076                     ?_PIN_MANAGER_Initialize:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0076                     ?_ADC_Initialize:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0076                     ?_ADC_ISR:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0076                     ?_INTERRUPT_InterruptManager:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0076                     ?_TMR1_Initialize:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0076                     ?_TMR1_WriteTimer:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0076                     ?_SYSTEM_Initialize:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646  0076                     ?_main:	
  1647                           ; 1 bytes @ 0x0
  1648                           
  1649  0076                     ?_ADC_GetConversionResult:	
  1650                           ; 1 bytes @ 0x0
  1651                           
  1652  0076                     TMR1_WriteTimer@timerVal:	
  1653                           ; 2 bytes @ 0x0
  1654                           
  1655                           
  1656                           ; 2 bytes @ 0x0
  1657  0076                     	ds	2
  1658  0078                     ??_TMR1_ISR:
  1659  0078                     ??_read:	
  1660                           ; 1 bytes @ 0x2
  1661                           
  1662  0078                     ??_ADC_GetConversionResult:	
  1663                           ; 1 bytes @ 0x2
  1664                           
  1665  0078                     ??_TMR1_WriteTimer:	
  1666                           ; 1 bytes @ 0x2
  1667                           
  1668                           
  1669                           ; 1 bytes @ 0x2
  1670  0078                     	ds	2
  1671  007A                     ??_ADC_ISR:
  1672  007A                     ??_INTERRUPT_InterruptManager:	
  1673                           ; 1 bytes @ 0x4
  1674                           
  1675                           
  1676                           	psect	cstackBANK0
  1677  0020                     __pcstackBANK0:	
  1678                           ; 1 bytes @ 0x4
  1679                           
  1680  0020                     ?_ADC_SetInterruptHandler:
  1681  0020                     ?_TMR1_SetInterruptHandler:	
  1682                           ; 1 bytes @ 0x0
  1683                           
  1684  0020                     ??_OSCILLATOR_Initialize:	
  1685                           ; 1 bytes @ 0x0
  1686                           
  1687  0020                     ??_WDT_Initialize:	
  1688                           ; 1 bytes @ 0x0
  1689                           
  1690  0020                     ??_GetTimeSystemInstance:	
  1691                           ; 1 bytes @ 0x0
  1692                           
  1693  0020                     ?_GetADCReaderInstance:	
  1694                           ; 1 bytes @ 0x0
  1695                           
  1696  0020                     ??_init:	
  1697                           ; 1 bytes @ 0x0
  1698                           
  1699  0020                     ??_PIN_MANAGER_Initialize:	
  1700                           ; 1 bytes @ 0x0
  1701                           
  1702  0020                     ?_sensorTasks:	
  1703                           ; 1 bytes @ 0x0
  1704                           
  1705  0020                     ?_NewSensor:	
  1706                           ; 1 bytes @ 0x0
  1707                           
  1708  0020                     sensorTasks@this:	
  1709                           ; 12 bytes @ 0x0
  1710                           
  1711  0020                     ADC_SetInterruptHandler@InterruptHandler:	
  1712                           ; 1 bytes @ 0x0
  1713                           
  1714  0020                     TMR1_SetInterruptHandler@InterruptHandler:	
  1715                           ; 2 bytes @ 0x0
  1716                           
  1717  0020                     NewSensor@ti:	
  1718                           ; 2 bytes @ 0x0
  1719                           
  1720  0020                     GetADCReaderInstance@getResult:	
  1721                           ; 2 bytes @ 0x0
  1722                           
  1723                           
  1724                           ; 2 bytes @ 0x0
  1725  0020                     	ds	1
  1726  0021                     sensorTasks@meassure:
  1727                           
  1728                           ; 2 bytes @ 0x1
  1729  0021                     	ds	1
  1730  0022                     ??_ADC_SetInterruptHandler:
  1731  0022                     ??_TMR1_SetInterruptHandler:	
  1732                           ; 1 bytes @ 0x2
  1733                           
  1734  0022                     ??_ADC_Initialize:	
  1735                           ; 1 bytes @ 0x2
  1736                           
  1737  0022                     ??_TMR1_Initialize:	
  1738                           ; 1 bytes @ 0x2
  1739                           
  1740  0022                     ??_SYSTEM_Initialize:	
  1741                           ; 1 bytes @ 0x2
  1742                           
  1743  0022                     NewSensor@tt:	
  1744                           ; 1 bytes @ 0x2
  1745                           
  1746  0022                     GetADCReaderInstance@setChannel:	
  1747                           ; 2 bytes @ 0x2
  1748                           
  1749                           
  1750                           ; 2 bytes @ 0x2
  1751  0022                     	ds	1
  1752  0023                     ??_sensorTasks:
  1753                           
  1754                           ; 1 bytes @ 0x3
  1755  0023                     	ds	1
  1756  0024                     NewSensor@tl:
  1757  0024                     GetADCReaderInstance@start:	
  1758                           ; 2 bytes @ 0x4
  1759                           
  1760                           
  1761                           ; 2 bytes @ 0x4
  1762  0024                     	ds	2
  1763  0026                     GetADCReaderInstance@teC:
  1764                           
  1765                           ; 1 bytes @ 0x6
  1766  0026                     	ds	1
  1767  0027                     GetADCReaderInstance@amC:
  1768                           
  1769                           ; 1 bytes @ 0x7
  1770  0027                     	ds	1
  1771  0028                     ??_GetADCReaderInstance:
  1772                           
  1773                           ; 1 bytes @ 0x8
  1774  0028                     	ds	4
  1775  002C                     ??_NewSensor:
  1776                           
  1777                           ; 1 bytes @ 0xC
  1778  002C                     	ds	1
  1779  002D                     NewSensor@ss:
  1780                           
  1781                           ; 12 bytes @ 0xD
  1782  002D                     	ds	18
  1783  003F                     ??_tasks:
  1784                           
  1785                           ; 1 bytes @ 0x1F
  1786  003F                     	ds	16
  1787  004F                     ??_main:
  1788                           
  1789                           	psect	maintext
  1790  0403                     __pmaintext:	
  1791                           ; 1 bytes @ 0x2F
  1792 ;;
  1793 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1794 ;;
  1795 ;; *************** function _main *****************
  1796 ;; Defined at:
  1797 ;;		line 50 in file "main.c"
  1798 ;; Parameters:    Size  Location     Type
  1799 ;;		None
  1800 ;; Auto vars:     Size  Location     Type
  1801 ;;		None
  1802 ;; Return value:  Size  Location     Type
  1803 ;;                  1    wreg      void 
  1804 ;; Registers used:
  1805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1806 ;; Tracked objects:
  1807 ;;		On entry : B1F/0
  1808 ;;		On exit  : 0/0
  1809 ;;		Unchanged: 0/0
  1810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1815 ;;Total ram usage:        0 bytes
  1816 ;; Hardware stack levels required when called:    7
  1817 ;; This function calls:
  1818 ;;		_SYSTEM_Initialize
  1819 ;;		_tasks
  1820 ;; This function is called by:
  1821 ;;		Startup code after reset
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           
  1826                           ;psect for function _main
  1827  0403                     _main:
  1828  0403                     l1721:	
  1829                           ;incstack = 0
  1830                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1831                           
  1832                           
  1833                           ;main.c: 53:     SYSTEM_Initialize();
  1834  0403  3183  23AF  3184   	fcall	_SYSTEM_Initialize
  1835  0406                     l1723:
  1836                           
  1837                           ;main.c: 59:     (INTCONbits.GIE = 1);
  1838  0406  178B               	bsf	11,7	;volatile
  1839  0407                     l1725:
  1840                           
  1841                           ;main.c: 62:     (INTCONbits.PEIE = 1);
  1842  0407  170B               	bsf	11,6	;volatile
  1843  0408                     l1727:
  1844                           
  1845                           ;main.c: 71:     {;main.c: 72:         tasks();
  1846  0408  3180  204C  3184   	fcall	_tasks
  1847  040B  2C08               	goto	l1727
  1848  040C  3180  2828         	ljmp	start
  1849  040E                     __end_of_main:
  1850                           
  1851                           	psect	text1
  1852  004C                     __ptext1:	
  1853 ;; *************** function _tasks *****************
  1854 ;; Defined at:
  1855 ;;		line 66 in file "app.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;		None
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1871 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1872 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1873 ;;Total ram usage:       16 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    6
  1876 ;; This function calls:
  1877 ;;		Absolute function
  1878 ;;		_ADC_SetInterruptHandler
  1879 ;;		_GetADCReaderInstance
  1880 ;;		_GetTimeSystemInstance
  1881 ;;		_NewSensor
  1882 ;;		_TMR1_SetInterruptHandler
  1883 ;;		_init
  1884 ;;		_sensorTasks
  1885 ;; This function is called by:
  1886 ;;		_main
  1887 ;; This function uses a non-reentrant model
  1888 ;;
  1889                           
  1890                           
  1891                           ;psect for function _tasks
  1892  004C                     _tasks:
  1893  004C                     l1675:	
  1894                           ;incstack = 0
  1895                           ; Regs used in _tasks: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1896                           
  1897                           
  1898                           ;app.c: 67:     switch (state) {
  1899  004C  29B3               	goto	l1713
  1900  004D                     l1677:
  1901                           
  1902                           ;app.c: 69:             timer = GetTimeSystemInstance();
  1903  004D  3184  243A  3180   	fcall	_GetTimeSystemInstance
  1904  0050  0020               	movlb	0	; select bank0
  1905  0051  00BF               	movwf	??_tasks
  1906  0052  083F               	movf	??_tasks,w
  1907  0053  00F4               	movwf	_timer
  1908  0054                     l1679:
  1909                           
  1910                           ;app.c: 70:             TMR1_SetInterruptHandler(timer->incCurrentTimeMillis);
  1911  0054  0874               	movf	_timer,w
  1912  0055  3E08               	addlw	8
  1913  0056  0086               	movwf	6
  1914  0057  0187               	clrf	7
  1915  0058  3F40               	moviw [0]fsr1
  1916  0059  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  1917  005A  3F41               	moviw [1]fsr1
  1918  005B  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  1919  005C  3184  2421  3180   	fcall	_TMR1_SetInterruptHandler
  1920  005F                     l1681:
  1921                           
  1922                           ;app.c: 71:             temperatureSensor = NewSensor(800, 300, 400);
  1923  005F  3020               	movlw	32
  1924  0060  0020               	movlb	0	; select bank0
  1925  0061  00A0               	movwf	NewSensor@ti
  1926  0062  3003               	movlw	3
  1927  0063  00A1               	movwf	NewSensor@ti+1
  1928  0064  302C               	movlw	44
  1929  0065  00A2               	movwf	NewSensor@tt
  1930  0066  3001               	movlw	1
  1931  0067  00A3               	movwf	NewSensor@tt+1
  1932  0068  3090               	movlw	144
  1933  0069  00A4               	movwf	NewSensor@tl
  1934  006A  3001               	movlw	1
  1935  006B  00A5               	movwf	NewSensor@tl+1
  1936  006C  3182  22D7  3180   	fcall	_NewSensor
  1937  006F  0020               	movlb	0	; select bank0
  1938  0070  3020               	movlw	low ?_NewSensor
  1939  0071  0086               	movwf	6
  1940  0072  3000               	movlw	high ?_NewSensor
  1941  0073  0087               	movwf	7
  1942  0074  30B8               	movlw	low _temperatureSensor
  1943  0075  0084               	movwf	4
  1944  0076  3000               	movlw	high _temperatureSensor
  1945  0077  0085               	movwf	5
  1946  0078  300C               	movlw	12
  1947  0079  00BF               	movwf	??_tasks
  1948  007A                     u510:
  1949  007A  0016               	moviw fsr1++
  1950  007B  001A               	movwi fsr0++
  1951  007C  0BBF               	decfsz	??_tasks,f
  1952  007D  287A               	goto	u510
  1953  007E                     l1683:
  1954                           
  1955                           ;app.c: 72:             ampSensor = NewSensor(800, 600, 400);
  1956  007E  3020               	movlw	32
  1957  007F  00A0               	movwf	NewSensor@ti
  1958  0080  3003               	movlw	3
  1959  0081  00A1               	movwf	NewSensor@ti+1
  1960  0082  3058               	movlw	88
  1961  0083  00A2               	movwf	NewSensor@tt
  1962  0084  3002               	movlw	2
  1963  0085  00A3               	movwf	NewSensor@tt+1
  1964  0086  3090               	movlw	144
  1965  0087  00A4               	movwf	NewSensor@tl
  1966  0088  3001               	movlw	1
  1967  0089  00A5               	movwf	NewSensor@tl+1
  1968  008A  3182  22D7  3180   	fcall	_NewSensor
  1969  008D  0020               	movlb	0	; select bank0
  1970  008E  3020               	movlw	low ?_NewSensor
  1971  008F  0086               	movwf	6
  1972  0090  3000               	movlw	high ?_NewSensor
  1973  0091  0087               	movwf	7
  1974  0092  30AC               	movlw	low _ampSensor
  1975  0093  0084               	movwf	4
  1976  0094  3000               	movlw	high _ampSensor
  1977  0095  0085               	movwf	5
  1978  0096  300C               	movlw	12
  1979  0097  00BF               	movwf	??_tasks
  1980  0098                     u520:
  1981  0098  0016               	moviw fsr1++
  1982  0099  001A               	movwi fsr0++
  1983  009A  0BBF               	decfsz	??_tasks,f
  1984  009B  2898               	goto	u520
  1985  009C                     l1685:
  1986                           
  1987                           ;app.c: 73:             adc = GetADCReaderInstance((uint16_t(*)(void)) ADC_GetConversion
      +                          Result,
  1988  009C  302D               	movlw	low _ADC_GetConversionResult
  1989  009D  00A0               	movwf	GetADCReaderInstance@getResult
  1990  009E  3004               	movlw	high _ADC_GetConversionResult
  1991  009F  00A1               	movwf	GetADCReaderInstance@getResult+1
  1992  00A0  3000               	movlw	0
  1993  00A1  00A2               	movwf	GetADCReaderInstance@setChannel
  1994  00A2  3000               	movlw	0
  1995  00A3  00A3               	movwf	GetADCReaderInstance@setChannel+1
  1996  00A4  3000               	movlw	0
  1997  00A5  00A4               	movwf	GetADCReaderInstance@start
  1998  00A6  3000               	movlw	0
  1999  00A7  00A5               	movwf	GetADCReaderInstance@start+1
  2000  00A8  01A6               	clrf	GetADCReaderInstance@teC
  2001  00A9  01A7               	clrf	GetADCReaderInstance@amC
  2002  00AA  0AA7               	incf	GetADCReaderInstance@amC,f
  2003  00AB  3183  238B  3180   	fcall	_GetADCReaderInstance
  2004  00AE  0020               	movlb	0	; select bank0
  2005  00AF  00BF               	movwf	??_tasks
  2006  00B0  083F               	movf	??_tasks,w
  2007  00B1  00F3               	movwf	_adc
  2008                           
  2009                           ;app.c: 78:             ADC_SetInterruptHandler(adc->read);
  2010  00B2  0873               	movf	_adc,w
  2011  00B3  3E04               	addlw	4
  2012  00B4  0086               	movwf	6
  2013  00B5  0187               	clrf	7
  2014  00B6  3F40               	moviw [0]fsr1
  2015  00B7  00A0               	movwf	ADC_SetInterruptHandler@InterruptHandler
  2016  00B8  3F41               	moviw [1]fsr1
  2017  00B9  00A1               	movwf	ADC_SetInterruptHandler@InterruptHandler+1
  2018  00BA  3184  2427  3180   	fcall	_ADC_SetInterruptHandler
  2019                           
  2020                           ;app.c: 79:             adc->init();
  2021  00BD  0873               	movf	_adc,w
  2022  00BE  3E06               	addlw	6
  2023  00BF  0086               	movwf	6
  2024  00C0  0187               	clrf	7
  2025  00C1  3F41               	moviw [1]fsr1
  2026  00C2  008A               	movwf	10
  2027  00C3  3F40               	moviw [0]fsr1
  2028  00C4  000A               	callw
  2029  00C5  3180               	pagesel	$
  2030  00C6                     l1687:
  2031                           
  2032                           ;app.c: 80:             state = MONITOR;
  2033  00C6  01F5               	clrf	_state
  2034  00C7  0AF5               	incf	_state,f
  2035                           
  2036                           ;app.c: 81:             break;
  2037  00C8  29CD               	goto	l274
  2038  00C9                     l1689:
  2039                           
  2040                           ;app.c: 83:             temperatureSensor.tasks(&temperatureSensor, adc->temperature);
  2041  00C9  30B8               	movlw	(low (_temperatureSensor| 0))& (0+255)
  2042  00CA  00BF               	movwf	??_tasks
  2043  00CB  083F               	movf	??_tasks,w
  2044  00CC  00A0               	movwf	sensorTasks@this
  2045  00CD  0873               	movf	_adc,w
  2046  00CE  0086               	movwf	6
  2047  00CF  0187               	clrf	7
  2048  00D0  3F40               	moviw [0]fsr1
  2049  00D1  00A1               	movwf	sensorTasks@meassure
  2050  00D2  3F41               	moviw [1]fsr1
  2051  00D3  00A2               	movwf	sensorTasks@meassure+1
  2052  00D4  3007               	movlw	7
  2053  00D5  3EB8               	addlw	(low (_temperatureSensor| 0))& (0+255)
  2054  00D6  0086               	movwf	6
  2055  00D7  0187               	clrf	7
  2056  00D8  3F41               	moviw [1]fsr1
  2057  00D9  008A               	movwf	10
  2058  00DA  3F40               	moviw [0]fsr1
  2059  00DB  000A               	callw
  2060  00DC  3180               	pagesel	$
  2061                           
  2062                           ;app.c: 84:             ampSensor.tasks(&ampSensor, adc->current);
  2063  00DD  30AC               	movlw	(low (_ampSensor| 0))& (0+255)
  2064  00DE  0020               	movlb	0	; select bank0
  2065  00DF  00BF               	movwf	??_tasks
  2066  00E0  083F               	movf	??_tasks,w
  2067  00E1  00A0               	movwf	sensorTasks@this
  2068  00E2  0873               	movf	_adc,w
  2069  00E3  3E02               	addlw	2
  2070  00E4  0086               	movwf	6
  2071  00E5  0187               	clrf	7
  2072  00E6  3F40               	moviw [0]fsr1
  2073  00E7  00A1               	movwf	sensorTasks@meassure
  2074  00E8  3F41               	moviw [1]fsr1
  2075  00E9  00A2               	movwf	sensorTasks@meassure+1
  2076  00EA  3007               	movlw	7
  2077  00EB  3EAC               	addlw	(low (_ampSensor| 0))& (0+255)
  2078  00EC  0086               	movwf	6
  2079  00ED  0187               	clrf	7
  2080  00EE  3F41               	moviw [1]fsr1
  2081  00EF  008A               	movwf	10
  2082  00F0  3F40               	moviw [0]fsr1
  2083  00F1  000A               	callw
  2084  00F2  3180               	pagesel	$
  2085  00F3                     l1691:
  2086                           
  2087                           ;app.c: 85:             if (ampSensor.trip || temperatureSensor.trip)
  2088  00F3  0021               	movlb	1	; select bank1
  2089  00F4  0837               	movf	(_ampSensor^(0+128)+11),w
  2090  00F5  1D03               	btfss	3,2
  2091  00F6  28F8               	goto	u531
  2092  00F7  28F9               	goto	u530
  2093  00F8                     u531:
  2094  00F8  28FE               	goto	l1695
  2095  00F9                     u530:
  2096  00F9                     l1693:
  2097  00F9  0843               	movf	(_temperatureSensor^(0+128)+11),w
  2098  00FA  1903               	btfsc	3,2
  2099  00FB  28FD               	goto	u541
  2100  00FC  28FE               	goto	u540
  2101  00FD                     u541:
  2102  00FD  29CD               	goto	l274
  2103  00FE                     u540:
  2104  00FE                     l1695:
  2105                           
  2106                           ;app.c: 86:                 state = START_PULSE;
  2107  00FE  3002               	movlw	2
  2108  00FF  0020               	movlb	0	; select bank0
  2109  0100  00BF               	movwf	??_tasks
  2110  0101  083F               	movf	??_tasks,w
  2111  0102  00F5               	movwf	_state
  2112  0103  29CD               	goto	l274
  2113  0104                     l1697:
  2114                           
  2115                           ;app.c: 89:             cronometer = timer->currentTimeMillis;
  2116  0104  0874               	movf	_timer,w
  2117  0105  0086               	movwf	6
  2118  0106  0187               	clrf	7
  2119  0107  3F40               	moviw [0]fsr1
  2120  0108  00F0               	movwf	_cronometer
  2121  0109  3F41               	moviw [1]fsr1
  2122  010A  00F1               	movwf	_cronometer+1
  2123  010B                     l1699:
  2124  010B  0022               	movlb	2	; select bank2
  2125  010C  158E               	bsf	14,3	;volatile
  2126  010D                     l1701:
  2127                           
  2128                           ;app.c: 91:             state = WAITING_PULSE;
  2129  010D  3003               	movlw	3
  2130  010E  0020               	movlb	0	; select bank0
  2131  010F  00BF               	movwf	??_tasks
  2132  0110  083F               	movf	??_tasks,w
  2133  0111  00F5               	movwf	_state
  2134                           
  2135                           ;app.c: 92:             break;
  2136  0112  29CD               	goto	l274
  2137  0113                     l1703:
  2138                           
  2139                           ;app.c: 94:             if ((timer->currentTimeMillis - cronometer) > 500) {
  2140  0113  0870               	movf	_cronometer,w
  2141  0114  00BF               	movwf	??_tasks
  2142  0115  0871               	movf	_cronometer+1,w
  2143  0116  00C0               	movwf	??_tasks+1
  2144  0117  01C1               	clrf	??_tasks+2
  2145  0118  01C2               	clrf	??_tasks+3
  2146  0119  01C3               	clrf	??_tasks+4
  2147  011A  01C4               	clrf	??_tasks+5
  2148  011B  01C5               	clrf	??_tasks+6
  2149  011C  01C6               	clrf	??_tasks+7
  2150  011D  0874               	movf	_timer,w
  2151  011E  0086               	movwf	6
  2152  011F  0187               	clrf	7
  2153  0120  3F40               	moviw [0]fsr1
  2154  0121  00C7               	movwf	??_tasks+8
  2155  0122  3F41               	moviw [1]fsr1
  2156  0123  00C8               	movwf	??_tasks+9
  2157  0124  3F42               	moviw [2]fsr1
  2158  0125  00C9               	movwf	??_tasks+10
  2159  0126  3F43               	moviw [3]fsr1
  2160  0127  00CA               	movwf	??_tasks+11
  2161  0128  3F44               	moviw [4]fsr1
  2162  0129  00CB               	movwf	??_tasks+12
  2163  012A  3F45               	moviw [5]fsr1
  2164  012B  00CC               	movwf	??_tasks+13
  2165  012C  3F46               	moviw [6]fsr1
  2166  012D  00CD               	movwf	??_tasks+14
  2167  012E  3F47               	moviw [7]fsr1
  2168  012F  00CE               	movwf	??_tasks+15
  2169  0130  083F               	movf	??_tasks,w
  2170  0131  02C7               	subwf	??_tasks+8,f
  2171  0132  0840               	movf	??_tasks+1,w
  2172  0133  3BC8               	subwfb	??_tasks+9,f
  2173  0134  0841               	movf	??_tasks+2,w
  2174  0135  3BC9               	subwfb	??_tasks+10,f
  2175  0136  0842               	movf	??_tasks+3,w
  2176  0137  3BCA               	subwfb	??_tasks+11,f
  2177  0138  0843               	movf	??_tasks+4,w
  2178  0139  3BCB               	subwfb	??_tasks+12,f
  2179  013A  0844               	movf	??_tasks+5,w
  2180  013B  3BCC               	subwfb	??_tasks+13,f
  2181  013C  0845               	movf	??_tasks+6,w
  2182  013D  3BCD               	subwfb	??_tasks+14,f
  2183  013E  0846               	movf	??_tasks+7,w
  2184  013F  3BCE               	subwfb	??_tasks+15,f
  2185  0140  084E               	movf	??_tasks+15,w
  2186  0141  1D03               	btfss	3,2
  2187  0142  295A               	goto	u550
  2188  0143  084D               	movf	??_tasks+14,w
  2189  0144  1D03               	btfss	3,2
  2190  0145  295A               	goto	u550
  2191  0146  084C               	movf	??_tasks+13,w
  2192  0147  1D03               	btfss	3,2
  2193  0148  295A               	goto	u550
  2194  0149  084B               	movf	??_tasks+12,w
  2195  014A  1D03               	btfss	3,2
  2196  014B  295A               	goto	u550
  2197  014C  084A               	movf	??_tasks+11,w
  2198  014D  1D03               	btfss	3,2
  2199  014E  295A               	goto	u550
  2200  014F  0849               	movf	??_tasks+10,w
  2201  0150  1D03               	btfss	3,2
  2202  0151  295A               	goto	u550
  2203  0152  30F5               	movlw	245
  2204  0153  0247               	subwf	??_tasks+8,w
  2205  0154  3001               	movlw	1
  2206  0155  3B48               	subwfb	??_tasks+9,w
  2207  0156  1C03               	btfss	3,0
  2208  0157  2959               	goto	u551
  2209  0158  295A               	goto	u550
  2210  0159                     u551:
  2211  0159  29CD               	goto	l274
  2212  015A                     u550:
  2213  015A                     l268:	
  2214                           ;app.c: 95:                 do { LATCbits.LATC3 = 0; } while(0);
  2215                           
  2216  015A  0022               	movlb	2	; select bank2
  2217  015B  118E               	bcf	14,3	;volatile
  2218  015C                     l1705:
  2219                           
  2220                           ;app.c: 96:                 state = WAITING_DEAD_TIME;
  2221  015C  3004               	movlw	4
  2222  015D  0020               	movlb	0	; select bank0
  2223  015E  00BF               	movwf	??_tasks
  2224  015F  083F               	movf	??_tasks,w
  2225  0160  00F5               	movwf	_state
  2226  0161                     l1707:
  2227                           
  2228                           ;app.c: 97:                 cronometer = timer->currentTimeMillis;
  2229  0161  0874               	movf	_timer,w
  2230  0162  0086               	movwf	6
  2231  0163  0187               	clrf	7
  2232  0164  3F40               	moviw [0]fsr1
  2233  0165  00F0               	movwf	_cronometer
  2234  0166  3F41               	moviw [1]fsr1
  2235  0167  00F1               	movwf	_cronometer+1
  2236  0168  29CD               	goto	l274
  2237  0169                     l1709:
  2238                           
  2239                           ;app.c: 101:             if ((timer->currentTimeMillis - cronometer) > 500) {
  2240  0169  0870               	movf	_cronometer,w
  2241  016A  00BF               	movwf	??_tasks
  2242  016B  0871               	movf	_cronometer+1,w
  2243  016C  00C0               	movwf	??_tasks+1
  2244  016D  01C1               	clrf	??_tasks+2
  2245  016E  01C2               	clrf	??_tasks+3
  2246  016F  01C3               	clrf	??_tasks+4
  2247  0170  01C4               	clrf	??_tasks+5
  2248  0171  01C5               	clrf	??_tasks+6
  2249  0172  01C6               	clrf	??_tasks+7
  2250  0173  0874               	movf	_timer,w
  2251  0174  0086               	movwf	6
  2252  0175  0187               	clrf	7
  2253  0176  3F40               	moviw [0]fsr1
  2254  0177  00C7               	movwf	??_tasks+8
  2255  0178  3F41               	moviw [1]fsr1
  2256  0179  00C8               	movwf	??_tasks+9
  2257  017A  3F42               	moviw [2]fsr1
  2258  017B  00C9               	movwf	??_tasks+10
  2259  017C  3F43               	moviw [3]fsr1
  2260  017D  00CA               	movwf	??_tasks+11
  2261  017E  3F44               	moviw [4]fsr1
  2262  017F  00CB               	movwf	??_tasks+12
  2263  0180  3F45               	moviw [5]fsr1
  2264  0181  00CC               	movwf	??_tasks+13
  2265  0182  3F46               	moviw [6]fsr1
  2266  0183  00CD               	movwf	??_tasks+14
  2267  0184  3F47               	moviw [7]fsr1
  2268  0185  00CE               	movwf	??_tasks+15
  2269  0186  083F               	movf	??_tasks,w
  2270  0187  02C7               	subwf	??_tasks+8,f
  2271  0188  0840               	movf	??_tasks+1,w
  2272  0189  3BC8               	subwfb	??_tasks+9,f
  2273  018A  0841               	movf	??_tasks+2,w
  2274  018B  3BC9               	subwfb	??_tasks+10,f
  2275  018C  0842               	movf	??_tasks+3,w
  2276  018D  3BCA               	subwfb	??_tasks+11,f
  2277  018E  0843               	movf	??_tasks+4,w
  2278  018F  3BCB               	subwfb	??_tasks+12,f
  2279  0190  0844               	movf	??_tasks+5,w
  2280  0191  3BCC               	subwfb	??_tasks+13,f
  2281  0192  0845               	movf	??_tasks+6,w
  2282  0193  3BCD               	subwfb	??_tasks+14,f
  2283  0194  0846               	movf	??_tasks+7,w
  2284  0195  3BCE               	subwfb	??_tasks+15,f
  2285  0196  084E               	movf	??_tasks+15,w
  2286  0197  1D03               	btfss	3,2
  2287  0198  29B0               	goto	u560
  2288  0199  084D               	movf	??_tasks+14,w
  2289  019A  1D03               	btfss	3,2
  2290  019B  29B0               	goto	u560
  2291  019C  084C               	movf	??_tasks+13,w
  2292  019D  1D03               	btfss	3,2
  2293  019E  29B0               	goto	u560
  2294  019F  084B               	movf	??_tasks+12,w
  2295  01A0  1D03               	btfss	3,2
  2296  01A1  29B0               	goto	u560
  2297  01A2  084A               	movf	??_tasks+11,w
  2298  01A3  1D03               	btfss	3,2
  2299  01A4  29B0               	goto	u560
  2300  01A5  0849               	movf	??_tasks+10,w
  2301  01A6  1D03               	btfss	3,2
  2302  01A7  29B0               	goto	u560
  2303  01A8  30F5               	movlw	245
  2304  01A9  0247               	subwf	??_tasks+8,w
  2305  01AA  3001               	movlw	1
  2306  01AB  3B48               	subwfb	??_tasks+9,w
  2307  01AC  1C03               	btfss	3,0
  2308  01AD  29AF               	goto	u561
  2309  01AE  29B0               	goto	u560
  2310  01AF                     u561:
  2311  01AF  29CD               	goto	l274
  2312  01B0                     u560:
  2313  01B0                     l272:	
  2314                           ;app.c: 102:                 do { LATCbits.LATC3 = 0; } while(0);
  2315                           
  2316  01B0  0022               	movlb	2	; select bank2
  2317  01B1  118E               	bcf	14,3	;volatile
  2318  01B2  28C6               	goto	l1687
  2319  01B3                     l1713:
  2320  01B3  0875               	movf	_state,w
  2321  01B4  0020               	movlb	0	; select bank0
  2322  01B5  00BF               	movwf	??_tasks
  2323  01B6  01C0               	clrf	??_tasks+1
  2324                           
  2325                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2326                           ; Switch size 1, requested type "simple"
  2327                           ; Number of cases is 1, Range of values is 0 to 0
  2328                           ; switch strategies available:
  2329                           ; Name         Instructions Cycles
  2330                           ; simple_byte            4     3 (average)
  2331                           ; direct_byte            8     6 (fixed)
  2332                           ; jumptable            260     6 (fixed)
  2333                           ;	Chosen strategy is simple_byte
  2334  01B7  0840               	movf	??_tasks+1,w
  2335  01B8  3A00               	xorlw	0	; case 0
  2336  01B9  1903               	skipnz
  2337  01BA  29BC               	goto	l1799
  2338  01BB  29CD               	goto	l274
  2339  01BC                     l1799:
  2340                           
  2341                           ; Switch size 1, requested type "simple"
  2342                           ; Number of cases is 5, Range of values is 0 to 4
  2343                           ; switch strategies available:
  2344                           ; Name         Instructions Cycles
  2345                           ; direct_byte           16     6 (fixed)
  2346                           ; simple_byte           16     9 (average)
  2347                           ; jumptable            260     6 (fixed)
  2348                           ;	Chosen strategy is simple_byte
  2349  01BC  083F               	movf	??_tasks,w
  2350  01BD  3A00               	xorlw	0	; case 0
  2351  01BE  1903               	skipnz
  2352  01BF  284D               	goto	l1677
  2353  01C0  3A01               	xorlw	1	; case 1
  2354  01C1  1903               	skipnz
  2355  01C2  28C9               	goto	l1689
  2356  01C3  3A03               	xorlw	3	; case 2
  2357  01C4  1903               	skipnz
  2358  01C5  2904               	goto	l1697
  2359  01C6  3A01               	xorlw	1	; case 3
  2360  01C7  1903               	skipnz
  2361  01C8  2913               	goto	l1703
  2362  01C9  3A07               	xorlw	7	; case 4
  2363  01CA  1903               	skipnz
  2364  01CB  2969               	goto	l1709
  2365  01CC  29CD               	goto	l274
  2366  01CD                     l274:
  2367  01CD  0008               	return
  2368  01CE                     __end_of_tasks:
  2369                           
  2370                           	psect	text2
  2371  01CE                     __ptext2:	
  2372 ;; *************** function _sensorTasks *****************
  2373 ;; Defined at:
  2374 ;;		line 18 in file "Sensor.c"
  2375 ;; Parameters:    Size  Location     Type
  2376 ;;  this            1    0[BANK0 ] PTR struct SENSOR_TAG
  2377 ;;		 -> ampSensor(12), temperatureSensor(12), 
  2378 ;;  meassure        2    1[BANK0 ] unsigned short 
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;		None
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  1    wreg      void 
  2383 ;; Registers used:
  2384 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2390 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2392 ;;      Temps:          0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2393 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2394 ;;Total ram usage:       31 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    4
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_NewSensor
  2401 ;;		_tasks
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404                           
  2405                           
  2406                           ;psect for function _sensorTasks
  2407  01CE                     _sensorTasks:
  2408  01CE                     l1631:	
  2409                           ;incstack = 0
  2410                           ; Regs used in _sensorTasks: [wreg-fsr1h+status,2+status,0]
  2411                           
  2412                           
  2413                           ;Sensor.c: 19:     switch (this->state) {
  2414  01CE  2ABF               	goto	l1665
  2415  01CF                     l1633:
  2416                           
  2417                           ;Sensor.c: 21:             if (meassure > this->triggerInst) {
  2418  01CF  0A20               	incf	sensorTasks@this,w
  2419  01D0  0086               	movwf	6
  2420  01D1  0187               	clrf	7
  2421  01D2  3F40               	moviw [0]fsr1
  2422  01D3  00A3               	movwf	??_sensorTasks
  2423  01D4  3F41               	moviw [1]fsr1
  2424  01D5  00A4               	movwf	??_sensorTasks+1
  2425  01D6  0822               	movf	sensorTasks@meassure+1,w
  2426  01D7  0224               	subwf	??_sensorTasks+1,w
  2427  01D8  1D03               	skipz
  2428  01D9  29DC               	goto	u465
  2429  01DA  0821               	movf	sensorTasks@meassure,w
  2430  01DB  0223               	subwf	??_sensorTasks,w
  2431  01DC                     u465:
  2432  01DC  1803               	skipnc
  2433  01DD  29DF               	goto	u461
  2434  01DE  29E0               	goto	u460
  2435  01DF                     u461:
  2436  01DF  29EE               	goto	l1641
  2437  01E0                     u460:
  2438  01E0                     l1635:
  2439                           
  2440                           ;Sensor.c: 22:                 this->state = TRIP;
  2441  01E0  3002               	movlw	2
  2442  01E1  00A3               	movwf	??_sensorTasks
  2443  01E2  0820               	movf	sensorTasks@this,w
  2444  01E3  0086               	movwf	6
  2445  01E4  0187               	clrf	7
  2446  01E5  0823               	movf	??_sensorTasks,w
  2447  01E6  0081               	movwf	1
  2448  01E7                     l1637:
  2449                           
  2450                           ;Sensor.c: 23:                 this->trip = 1;
  2451  01E7  0820               	movf	sensorTasks@this,w
  2452  01E8  3E0B               	addlw	11
  2453  01E9  0086               	movwf	6
  2454  01EA  0187               	clrf	7
  2455  01EB  0181               	clrf	1
  2456  01EC  0A81               	incf	1,f
  2457                           
  2458                           ;Sensor.c: 24:                 break;
  2459  01ED  2AD6               	goto	l293
  2460  01EE                     l1641:
  2461  01EE  0820               	movf	sensorTasks@this,w
  2462  01EF  3E03               	addlw	3
  2463  01F0  0086               	movwf	6
  2464  01F1  0187               	clrf	7
  2465  01F2  3F40               	moviw [0]fsr1
  2466  01F3  00A3               	movwf	??_sensorTasks
  2467  01F4  3F41               	moviw [1]fsr1
  2468  01F5  00A4               	movwf	??_sensorTasks+1
  2469  01F6  0822               	movf	sensorTasks@meassure+1,w
  2470  01F7  0224               	subwf	??_sensorTasks+1,w
  2471  01F8  1D03               	skipz
  2472  01F9  29FC               	goto	u475
  2473  01FA  0821               	movf	sensorTasks@meassure,w
  2474  01FB  0223               	subwf	??_sensorTasks,w
  2475  01FC                     u475:
  2476  01FC  1803               	skipnc
  2477  01FD  29FF               	goto	u471
  2478  01FE  2A00               	goto	u470
  2479  01FF                     u471:
  2480  01FF  2AD6               	goto	l293
  2481  0200                     u470:
  2482  0200                     l1643:
  2483                           
  2484                           ;Sensor.c: 26:                 this->state = TEMPORIZED;
  2485  0200  0820               	movf	sensorTasks@this,w
  2486  0201  0086               	movwf	6
  2487  0202  0187               	clrf	7
  2488  0203  0181               	clrf	1
  2489  0204  0A81               	incf	1,f
  2490  0205                     l1645:
  2491                           
  2492                           ;Sensor.c: 27:                 this->cronometer = timer->currentTimeMillis;
  2493  0205  0872               	movf	_timer@Sensor$F674,w
  2494  0206  0086               	movwf	6
  2495  0207  0187               	clrf	7
  2496  0208  0820               	movf	sensorTasks@this,w
  2497  0209  3E09               	addlw	9
  2498  020A  0084               	movwf	4
  2499  020B  0185               	clrf	5
  2500  020C  3F40               	moviw [0]fsr1
  2501  020D  3F80               	movwi [0]fsr0
  2502  020E  3F41               	moviw [1]fsr1
  2503  020F  3F81               	movwi [1]fsr0
  2504                           
  2505                           ;Sensor.c: 28:                 break;
  2506  0210  2AD6               	goto	l293
  2507  0211                     l1647:
  2508                           
  2509                           ;Sensor.c: 32:             if ((timer->currentTimeMillis - this->cronometer) > this->tim
      +                          eLimit) {
  2510  0211  0820               	movf	sensorTasks@this,w
  2511  0212  3E09               	addlw	9
  2512  0213  0086               	movwf	6
  2513  0214  0187               	clrf	7
  2514  0215  3F40               	moviw [0]fsr1
  2515  0216  00A3               	movwf	??_sensorTasks
  2516  0217  3F41               	moviw [1]fsr1
  2517  0218  00A4               	movwf	??_sensorTasks+1
  2518  0219  0823               	movf	??_sensorTasks,w
  2519  021A  00A5               	movwf	??_sensorTasks+2
  2520  021B  0824               	movf	??_sensorTasks+1,w
  2521  021C  00A6               	movwf	??_sensorTasks+3
  2522  021D  01A7               	clrf	??_sensorTasks+4
  2523  021E  01A8               	clrf	??_sensorTasks+5
  2524  021F  01A9               	clrf	??_sensorTasks+6
  2525  0220  01AA               	clrf	??_sensorTasks+7
  2526  0221  01AB               	clrf	??_sensorTasks+8
  2527  0222  01AC               	clrf	??_sensorTasks+9
  2528  0223  0872               	movf	_timer@Sensor$F674,w
  2529  0224  0086               	movwf	6
  2530  0225  0187               	clrf	7
  2531  0226  3F40               	moviw [0]fsr1
  2532  0227  00AD               	movwf	??_sensorTasks+10
  2533  0228  3F41               	moviw [1]fsr1
  2534  0229  00AE               	movwf	??_sensorTasks+11
  2535  022A  3F42               	moviw [2]fsr1
  2536  022B  00AF               	movwf	??_sensorTasks+12
  2537  022C  3F43               	moviw [3]fsr1
  2538  022D  00B0               	movwf	??_sensorTasks+13
  2539  022E  3F44               	moviw [4]fsr1
  2540  022F  00B1               	movwf	??_sensorTasks+14
  2541  0230  3F45               	moviw [5]fsr1
  2542  0231  00B2               	movwf	??_sensorTasks+15
  2543  0232  3F46               	moviw [6]fsr1
  2544  0233  00B3               	movwf	??_sensorTasks+16
  2545  0234  3F47               	moviw [7]fsr1
  2546  0235  00B4               	movwf	??_sensorTasks+17
  2547  0236  0825               	movf	??_sensorTasks+2,w
  2548  0237  02AD               	subwf	??_sensorTasks+10,f
  2549  0238  0826               	movf	??_sensorTasks+3,w
  2550  0239  3BAE               	subwfb	??_sensorTasks+11,f
  2551  023A  0827               	movf	??_sensorTasks+4,w
  2552  023B  3BAF               	subwfb	??_sensorTasks+12,f
  2553  023C  0828               	movf	??_sensorTasks+5,w
  2554  023D  3BB0               	subwfb	??_sensorTasks+13,f
  2555  023E  0829               	movf	??_sensorTasks+6,w
  2556  023F  3BB1               	subwfb	??_sensorTasks+14,f
  2557  0240  082A               	movf	??_sensorTasks+7,w
  2558  0241  3BB2               	subwfb	??_sensorTasks+15,f
  2559  0242  082B               	movf	??_sensorTasks+8,w
  2560  0243  3BB3               	subwfb	??_sensorTasks+16,f
  2561  0244  082C               	movf	??_sensorTasks+9,w
  2562  0245  3BB4               	subwfb	??_sensorTasks+17,f
  2563  0246  0820               	movf	sensorTasks@this,w
  2564  0247  3E05               	addlw	5
  2565  0248  0086               	movwf	6
  2566  0249  0187               	clrf	7
  2567  024A  3F40               	moviw [0]fsr1
  2568  024B  00B5               	movwf	??_sensorTasks+18
  2569  024C  3F41               	moviw [1]fsr1
  2570  024D  00B6               	movwf	??_sensorTasks+19
  2571  024E  0835               	movf	??_sensorTasks+18,w
  2572  024F  00B7               	movwf	??_sensorTasks+20
  2573  0250  0836               	movf	??_sensorTasks+19,w
  2574  0251  00B8               	movwf	??_sensorTasks+21
  2575  0252  01B9               	clrf	??_sensorTasks+22
  2576  0253  01BA               	clrf	??_sensorTasks+23
  2577  0254  01BB               	clrf	??_sensorTasks+24
  2578  0255  01BC               	clrf	??_sensorTasks+25
  2579  0256  01BD               	clrf	??_sensorTasks+26
  2580  0257  01BE               	clrf	??_sensorTasks+27
  2581  0258  0834               	movf	??_sensorTasks+17,w
  2582  0259  023E               	subwf	??_sensorTasks+27,w
  2583  025A  1D03               	skipz
  2584  025B  2A76               	goto	u485
  2585  025C  0833               	movf	??_sensorTasks+16,w
  2586  025D  023D               	subwf	??_sensorTasks+26,w
  2587  025E  1D03               	skipz
  2588  025F  2A76               	goto	u485
  2589  0260  0832               	movf	??_sensorTasks+15,w
  2590  0261  023C               	subwf	??_sensorTasks+25,w
  2591  0262  1D03               	skipz
  2592  0263  2A76               	goto	u485
  2593  0264  0831               	movf	??_sensorTasks+14,w
  2594  0265  023B               	subwf	??_sensorTasks+24,w
  2595  0266  1D03               	skipz
  2596  0267  2A76               	goto	u485
  2597  0268  0830               	movf	??_sensorTasks+13,w
  2598  0269  023A               	subwf	??_sensorTasks+23,w
  2599  026A  1D03               	skipz
  2600  026B  2A76               	goto	u485
  2601  026C  082F               	movf	??_sensorTasks+12,w
  2602  026D  0239               	subwf	??_sensorTasks+22,w
  2603  026E  1D03               	skipz
  2604  026F  2A76               	goto	u485
  2605  0270  082E               	movf	??_sensorTasks+11,w
  2606  0271  0238               	subwf	??_sensorTasks+21,w
  2607  0272  1D03               	skipz
  2608  0273  2A76               	goto	u485
  2609  0274  082D               	movf	??_sensorTasks+10,w
  2610  0275  0237               	subwf	??_sensorTasks+20,w
  2611  0276                     u485:
  2612  0276  1803               	skipnc
  2613  0277  2A79               	goto	u481
  2614  0278  2A7A               	goto	u480
  2615  0279                     u481:
  2616  0279  2A88               	goto	l1653
  2617  027A                     u480:
  2618  027A                     l1649:
  2619                           
  2620                           ;Sensor.c: 33:                 this->state = TRIP;
  2621  027A  3002               	movlw	2
  2622  027B  00A3               	movwf	??_sensorTasks
  2623  027C  0820               	movf	sensorTasks@this,w
  2624  027D  0086               	movwf	6
  2625  027E  0187               	clrf	7
  2626  027F  0823               	movf	??_sensorTasks,w
  2627  0280  0081               	movwf	1
  2628  0281                     l1651:
  2629                           
  2630                           ;Sensor.c: 34:                 this->trip = 1;
  2631  0281  0820               	movf	sensorTasks@this,w
  2632  0282  3E0B               	addlw	11
  2633  0283  0086               	movwf	6
  2634  0284  0187               	clrf	7
  2635  0285  0181               	clrf	1
  2636  0286  0A81               	incf	1,f
  2637                           
  2638                           ;Sensor.c: 35:             } else if (meassure < this->triggerTemp) {
  2639  0287  2AA3               	goto	l1659
  2640  0288                     l1653:
  2641  0288  0820               	movf	sensorTasks@this,w
  2642  0289  3E03               	addlw	3
  2643  028A  0086               	movwf	6
  2644  028B  0187               	clrf	7
  2645  028C  3F40               	moviw [0]fsr1
  2646  028D  00A3               	movwf	??_sensorTasks
  2647  028E  3F41               	moviw [1]fsr1
  2648  028F  00A4               	movwf	??_sensorTasks+1
  2649  0290  0824               	movf	??_sensorTasks+1,w
  2650  0291  0222               	subwf	sensorTasks@meassure+1,w
  2651  0292  1D03               	skipz
  2652  0293  2A96               	goto	u495
  2653  0294  0823               	movf	??_sensorTasks,w
  2654  0295  0221               	subwf	sensorTasks@meassure,w
  2655  0296                     u495:
  2656  0296  1803               	skipnc
  2657  0297  2A99               	goto	u491
  2658  0298  2A9A               	goto	u490
  2659  0299                     u491:
  2660  0299  2AA3               	goto	l1659
  2661  029A                     u490:
  2662  029A                     l1655:
  2663                           
  2664                           ;Sensor.c: 36:                 this->trip = 0;
  2665  029A  0820               	movf	sensorTasks@this,w
  2666  029B  3E0B               	addlw	11
  2667  029C  0086               	movwf	6
  2668  029D  0187               	clrf	7
  2669  029E  0181               	clrf	1
  2670  029F                     l1657:
  2671                           
  2672                           ;Sensor.c: 37:                 this->state = MONITORING;
  2673  029F  0820               	movf	sensorTasks@this,w
  2674  02A0  0086               	movwf	6
  2675  02A1  0187               	clrf	7
  2676  02A2  0181               	clrf	1
  2677  02A3                     l1659:
  2678                           
  2679                           ;Sensor.c: 40:             if (meassure < this->triggerTemp) {
  2680  02A3  0820               	movf	sensorTasks@this,w
  2681  02A4  3E03               	addlw	3
  2682  02A5  0086               	movwf	6
  2683  02A6  0187               	clrf	7
  2684  02A7  3F40               	moviw [0]fsr1
  2685  02A8  00A3               	movwf	??_sensorTasks
  2686  02A9  3F41               	moviw [1]fsr1
  2687  02AA  00A4               	movwf	??_sensorTasks+1
  2688  02AB  0824               	movf	??_sensorTasks+1,w
  2689  02AC  0222               	subwf	sensorTasks@meassure+1,w
  2690  02AD  1D03               	skipz
  2691  02AE  2AB1               	goto	u505
  2692  02AF  0823               	movf	??_sensorTasks,w
  2693  02B0  0221               	subwf	sensorTasks@meassure,w
  2694  02B1                     u505:
  2695  02B1  1803               	skipnc
  2696  02B2  2AB4               	goto	u501
  2697  02B3  2AB5               	goto	u500
  2698  02B4                     u501:
  2699  02B4  2AD6               	goto	l293
  2700  02B5                     u500:
  2701  02B5                     l1661:
  2702                           
  2703                           ;Sensor.c: 41:                 this->trip = 0;
  2704  02B5  0820               	movf	sensorTasks@this,w
  2705  02B6  3E0B               	addlw	11
  2706  02B7  0086               	movwf	6
  2707  02B8  0187               	clrf	7
  2708  02B9  0181               	clrf	1
  2709  02BA                     l1663:
  2710                           
  2711                           ;Sensor.c: 42:                 this->state = MONITORING;
  2712  02BA  0820               	movf	sensorTasks@this,w
  2713  02BB  0086               	movwf	6
  2714  02BC  0187               	clrf	7
  2715  02BD  0181               	clrf	1
  2716  02BE  2AD6               	goto	l293
  2717  02BF                     l1665:
  2718  02BF  0020               	movlb	0	; select bank0
  2719  02C0  0820               	movf	sensorTasks@this,w
  2720  02C1  0086               	movwf	6
  2721  02C2  0187               	clrf	7
  2722  02C3  0801               	movf	1,w
  2723  02C4  00A3               	movwf	??_sensorTasks
  2724  02C5  01A4               	clrf	??_sensorTasks+1
  2725                           
  2726                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2727                           ; Switch size 1, requested type "simple"
  2728                           ; Number of cases is 1, Range of values is 0 to 0
  2729                           ; switch strategies available:
  2730                           ; Name         Instructions Cycles
  2731                           ; simple_byte            4     3 (average)
  2732                           ; direct_byte            8     6 (fixed)
  2733                           ; jumptable            260     6 (fixed)
  2734                           ;	Chosen strategy is simple_byte
  2735  02C6  0824               	movf	??_sensorTasks+1,w
  2736  02C7  3A00               	xorlw	0	; case 0
  2737  02C8  1903               	skipnz
  2738  02C9  2ACB               	goto	l1801
  2739  02CA  2AD6               	goto	l293
  2740  02CB                     l1801:
  2741                           
  2742                           ; Switch size 1, requested type "simple"
  2743                           ; Number of cases is 3, Range of values is 0 to 2
  2744                           ; switch strategies available:
  2745                           ; Name         Instructions Cycles
  2746                           ; simple_byte           10     6 (average)
  2747                           ; direct_byte           12     6 (fixed)
  2748                           ; jumptable            260     6 (fixed)
  2749                           ;	Chosen strategy is simple_byte
  2750  02CB  0823               	movf	??_sensorTasks,w
  2751  02CC  3A00               	xorlw	0	; case 0
  2752  02CD  1903               	skipnz
  2753  02CE  29CF               	goto	l1633
  2754  02CF  3A01               	xorlw	1	; case 1
  2755  02D0  1903               	skipnz
  2756  02D1  2A11               	goto	l1647
  2757  02D2  3A03               	xorlw	3	; case 2
  2758  02D3  1903               	skipnz
  2759  02D4  2AA3               	goto	l1659
  2760  02D5  2AD6               	goto	l293
  2761  02D6                     l293:
  2762  02D6  0008               	return
  2763  02D7                     __end_of_sensorTasks:
  2764                           
  2765                           	psect	text3
  2766  0437                     __ptext3:	
  2767 ;; *************** function _init *****************
  2768 ;; Defined at:
  2769 ;;		line 47 in file "ADCReader.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;		None
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;		None
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  1    wreg      void 
  2776 ;; Registers used:
  2777 ;;		status,2
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2787 ;;Total ram usage:        0 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; Hardware stack levels required when called:    4
  2790 ;; This function calls:
  2791 ;;		Nothing
  2792 ;; This function is called by:
  2793 ;;		_tasks
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           
  2798                           ;psect for function _init
  2799  0437                     _init:
  2800  0437                     l1671:	
  2801                           ;incstack = 0
  2802                           ; Regs used in _init: [status,2]
  2803                           
  2804                           
  2805                           ;ADCReader.c: 50:     self.startConversion();
  2806  0437  0020               	movlb	0	; select bank0
  2807  0438  01D7               	clrf	_self+8
  2808  0439                     l317:
  2809  0439  0008               	return
  2810  043A                     __end_of_init:
  2811                           
  2812                           	psect	text4
  2813  02D7                     __ptext4:	
  2814 ;; *************** function _NewSensor *****************
  2815 ;; Defined at:
  2816 ;;		line 47 in file "Sensor.c"
  2817 ;; Parameters:    Size  Location     Type
  2818 ;;  ti              2    0[BANK0 ] unsigned short 
  2819 ;;  tt              2    2[BANK0 ] unsigned short 
  2820 ;;  tl              2    4[BANK0 ] unsigned short 
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;  ss             12   13[BANK0 ] struct SENSOR_TAG
  2823 ;; Return value:  Size  Location     Type
  2824 ;;                  12    0[BANK0 ] struct SENSOR_TAG
  2825 ;; Registers used:
  2826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2827 ;; Tracked objects:
  2828 ;;		On entry : 0/0
  2829 ;;		On exit  : 0/0
  2830 ;;		Unchanged: 0/0
  2831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2832 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2833 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2835 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2836 ;;Total ram usage:       25 bytes
  2837 ;; Hardware stack levels used:    1
  2838 ;; Hardware stack levels required when called:    5
  2839 ;; This function calls:
  2840 ;;		_GetTimeSystemInstance
  2841 ;; This function is called by:
  2842 ;;		_tasks
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845                           
  2846                           
  2847                           ;psect for function _NewSensor
  2848  02D7                     _NewSensor:
  2849  02D7                     l1607:	
  2850                           ;incstack = 0
  2851                           ; Regs used in _NewSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2852                           
  2853                           
  2854                           ;Sensor.c: 48:     timer = GetTimeSystemInstance();
  2855  02D7  3184  243A  3182   	fcall	_GetTimeSystemInstance
  2856  02DA  0020               	movlb	0	; select bank0
  2857  02DB  00AC               	movwf	??_NewSensor
  2858  02DC  082C               	movf	??_NewSensor,w
  2859  02DD  00F2               	movwf	_timer@Sensor$F674
  2860  02DE                     l1609:
  2861                           
  2862                           ;Sensor.c: 49:     Sensor ss = {
  2863  02DE  30A0               	movlw	low NewSensor@F69
  2864  02DF  0086               	movwf	6
  2865  02E0  3000               	movlw	high NewSensor@F69
  2866  02E1  0087               	movwf	7
  2867  02E2  302D               	movlw	low NewSensor@ss
  2868  02E3  0084               	movwf	4
  2869  02E4  3000               	movlw	high NewSensor@ss
  2870  02E5  0085               	movwf	5
  2871  02E6  300C               	movlw	12
  2872  02E7  00AC               	movwf	??_NewSensor
  2873  02E8                     u440:
  2874  02E8  0016               	moviw fsr1++
  2875  02E9  001A               	movwi fsr0++
  2876  02EA  0BAC               	decfsz	??_NewSensor,f
  2877  02EB  2AE8               	goto	u440
  2878  02EC                     l1611:
  2879  02EC  01AD               	clrf	NewSensor@ss
  2880  02ED                     l1613:
  2881  02ED  0821               	movf	NewSensor@ti+1,w
  2882  02EE  00AF               	movwf	NewSensor@ss+2
  2883  02EF  0820               	movf	NewSensor@ti,w
  2884  02F0  00AE               	movwf	NewSensor@ss+1
  2885  02F1                     l1615:
  2886  02F1  0823               	movf	NewSensor@tt+1,w
  2887  02F2  00B1               	movwf	NewSensor@ss+4
  2888  02F3  0822               	movf	NewSensor@tt,w
  2889  02F4  00B0               	movwf	NewSensor@ss+3
  2890  02F5                     l1617:
  2891  02F5  0825               	movf	NewSensor@tl+1,w
  2892  02F6  00B3               	movwf	NewSensor@ss+6
  2893  02F7  0824               	movf	NewSensor@tl,w
  2894  02F8  00B2               	movwf	NewSensor@ss+5
  2895  02F9                     l1619:
  2896  02F9  30CE               	movlw	low _sensorTasks
  2897  02FA  00B4               	movwf	low ((NewSensor@ss| 0+7))
  2898  02FB  3001               	movlw	high _sensorTasks
  2899  02FC  00B5               	movwf	(low ((NewSensor@ss| 0+7))+1)
  2900  02FD                     l1621:
  2901  02FD  01B8               	clrf	NewSensor@ss+11
  2902  02FE                     l1623:
  2903                           
  2904                           ;Sensor.c: 57:     return ss;
  2905  02FE  302D               	movlw	low NewSensor@ss
  2906  02FF  0086               	movwf	6
  2907  0300  3000               	movlw	high NewSensor@ss
  2908  0301  0087               	movwf	7
  2909  0302  3020               	movlw	low ?_NewSensor
  2910  0303  0084               	movwf	4
  2911  0304  3000               	movlw	high ?_NewSensor
  2912  0305  0085               	movwf	5
  2913  0306  300C               	movlw	12
  2914  0307  00AC               	movwf	??_NewSensor
  2915  0308                     u450:
  2916  0308  0016               	moviw fsr1++
  2917  0309  001A               	movwi fsr0++
  2918  030A  0BAC               	decfsz	??_NewSensor,f
  2919  030B  2B08               	goto	u450
  2920  030C                     l298:
  2921  030C  0008               	return
  2922  030D                     __end_of_NewSensor:
  2923                           
  2924                           	psect	text5
  2925  043A                     __ptext5:	
  2926 ;; *************** function _GetTimeSystemInstance *****************
  2927 ;; Defined at:
  2928 ;;		line 25 in file "TimeSystem.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      PTR struct .
  2935 ;; Registers used:
  2936 ;;		wreg
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2946 ;;Total ram usage:        0 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    4
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		_tasks
  2953 ;;		_NewSensor
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           
  2958                           ;psect for function _GetTimeSystemInstance
  2959  043A                     _GetTimeSystemInstance:
  2960  043A                     l1559:	
  2961                           ;incstack = 0
  2962                           ; Regs used in _GetTimeSystemInstance: [wreg]
  2963                           
  2964                           
  2965                           ;TimeSystem.c: 26:     return &instance;
  2966  043A  3060               	movlw	(low (_instance| 0))& (0+255)
  2967  043B                     l218:
  2968  043B  0008               	return
  2969  043C                     __end_of_GetTimeSystemInstance:
  2970                           
  2971                           	psect	text6
  2972  038B                     __ptext6:	
  2973 ;; *************** function _GetADCReaderInstance *****************
  2974 ;; Defined at:
  2975 ;;		line 23 in file "ADCReader.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  getResult       2    0[BANK0 ] PTR FTN()unsigned short 
  2978 ;;		 -> ADC_GetConversionResult(2), 
  2979 ;;  setChannel      2    2[BANK0 ] PTR FTN(unsigned char ,)
  2980 ;;		 -> ADC_SelectChannel(1), 
  2981 ;;  start           2    4[BANK0 ] PTR FTN()void 
  2982 ;;		 -> ADC_StartConversion(1), 
  2983 ;;  teC             1    6[BANK0 ] unsigned char 
  2984 ;;  amC             1    7[BANK0 ] unsigned char 
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;		None
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  1    wreg      PTR struct .
  2989 ;; Registers used:
  2990 ;;		wreg
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2996 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2998 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2999 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3000 ;;Total ram usage:        9 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:    4
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_tasks
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           
  3011                           ;psect for function _GetADCReaderInstance
  3012  038B                     _GetADCReaderInstance:
  3013  038B                     l1627:	
  3014                           ;incstack = 0
  3015                           ; Regs used in _GetADCReaderInstance: [wreg]
  3016                           
  3017                           
  3018                           ;ADCReader.c: 24:     self.ampChannel = amC;
  3019  038B  0020               	movlb	0	; select bank0
  3020  038C  0827               	movf	GetADCReaderInstance@amC,w
  3021  038D  00A8               	movwf	??_GetADCReaderInstance
  3022  038E  0828               	movf	??_GetADCReaderInstance,w
  3023  038F  00DF               	movwf	_self+16
  3024                           
  3025                           ;ADCReader.c: 25:     self.tempChannel = teC;
  3026  0390  0826               	movf	GetADCReaderInstance@teC,w
  3027  0391  00A8               	movwf	??_GetADCReaderInstance
  3028  0392  0828               	movf	??_GetADCReaderInstance,w
  3029  0393  00DE               	movwf	_self+15
  3030                           
  3031                           ;ADCReader.c: 26:     self.setChannel = setChannel;
  3032  0394  0823               	movf	GetADCReaderInstance@setChannel+1,w
  3033  0395  00DB               	movwf	(low ((_self| 0+11))+1)
  3034  0396  0822               	movf	GetADCReaderInstance@setChannel,w
  3035  0397  00DA               	movwf	low ((_self| 0+11))
  3036                           
  3037                           ;ADCReader.c: 27:     self.getResult = getResult;
  3038  0398  0821               	movf	GetADCReaderInstance@getResult+1,w
  3039  0399  00D9               	movwf	(low ((_self| 0+9))+1)
  3040  039A  0820               	movf	GetADCReaderInstance@getResult,w
  3041  039B  00D8               	movwf	low ((_self| 0+9))
  3042                           
  3043                           ;ADCReader.c: 28:     return &self;
  3044  039C  304F               	movlw	(low (_self| 0))& (0+255)
  3045  039D                     l307:
  3046  039D  0008               	return
  3047  039E                     __end_of_GetADCReaderInstance:
  3048                           
  3049                           	psect	text7
  3050  03AF                     __ptext7:	
  3051 ;; *************** function _SYSTEM_Initialize *****************
  3052 ;; Defined at:
  3053 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;		None
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;		None
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  1    wreg      void 
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0, pclath, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3071 ;;Total ram usage:        0 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    6
  3074 ;; This function calls:
  3075 ;;		_ADC_Initialize
  3076 ;;		_OSCILLATOR_Initialize
  3077 ;;		_PIN_MANAGER_Initialize
  3078 ;;		_TMR1_Initialize
  3079 ;;		_WDT_Initialize
  3080 ;; This function is called by:
  3081 ;;		_main
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           
  3086                           ;psect for function _SYSTEM_Initialize
  3087  03AF                     _SYSTEM_Initialize:
  3088  03AF                     l1673:	
  3089                           ;incstack = 0
  3090                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3091                           
  3092                           
  3093                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3094  03AF  3183  2375  3183   	fcall	_PIN_MANAGER_Initialize
  3095                           
  3096                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3097  03B2  3184  240E  3183   	fcall	_OSCILLATOR_Initialize
  3098                           
  3099                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3100  03B5  3184  2433  3183   	fcall	_WDT_Initialize
  3101                           
  3102                           ;mcc_generated_files/mcc.c: 56:     TMR1_Initialize();
  3103  03B8  3183  235C  3183   	fcall	_TMR1_Initialize
  3104                           
  3105                           ;mcc_generated_files/mcc.c: 57:     ADC_Initialize();
  3106  03BB  3183  23BF  3183   	fcall	_ADC_Initialize
  3107  03BE                     l191:
  3108  03BE  0008               	return
  3109  03BF                     __end_of_SYSTEM_Initialize:
  3110                           
  3111                           	psect	text8
  3112  0433                     __ptext8:	
  3113 ;; *************** function _WDT_Initialize *****************
  3114 ;; Defined at:
  3115 ;;		line 70 in file "mcc_generated_files/mcc.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;		None
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;		None
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  1    wreg      void 
  3122 ;; Registers used:
  3123 ;;		wreg
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3133 ;;Total ram usage:        0 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; Hardware stack levels required when called:    4
  3136 ;; This function calls:
  3137 ;;		Nothing
  3138 ;; This function is called by:
  3139 ;;		_SYSTEM_Initialize
  3140 ;; This function uses a non-reentrant model
  3141 ;;
  3142                           
  3143                           
  3144                           ;psect for function _WDT_Initialize
  3145  0433                     _WDT_Initialize:
  3146  0433                     l1605:	
  3147                           ;incstack = 0
  3148                           ; Regs used in _WDT_Initialize: [wreg]
  3149                           
  3150                           
  3151                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x16;
  3152  0433  3016               	movlw	22
  3153  0434  0021               	movlb	1	; select bank1
  3154  0435  0097               	movwf	23	;volatile
  3155  0436                     l197:
  3156  0436  0008               	return
  3157  0437                     __end_of_WDT_Initialize:
  3158                           
  3159                           	psect	text9
  3160  035C                     __ptext9:	
  3161 ;; *************** function _TMR1_Initialize *****************
  3162 ;; Defined at:
  3163 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;		None
  3166 ;; Auto vars:     Size  Location     Type
  3167 ;;		None
  3168 ;; Return value:  Size  Location     Type
  3169 ;;                  1    wreg      void 
  3170 ;; Registers used:
  3171 ;;		wreg, status,2, status,0, pclath, cstack
  3172 ;; Tracked objects:
  3173 ;;		On entry : 0/0
  3174 ;;		On exit  : 0/0
  3175 ;;		Unchanged: 0/0
  3176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3181 ;;Total ram usage:        0 bytes
  3182 ;; Hardware stack levels used:    1
  3183 ;; Hardware stack levels required when called:    5
  3184 ;; This function calls:
  3185 ;;		_TMR1_SetInterruptHandler
  3186 ;; This function is called by:
  3187 ;;		_SYSTEM_Initialize
  3188 ;; This function uses a non-reentrant model
  3189 ;;
  3190                           
  3191                           
  3192                           ;psect for function _TMR1_Initialize
  3193  035C                     _TMR1_Initialize:
  3194  035C                     l1583:	
  3195                           ;incstack = 0
  3196                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3197                           
  3198                           
  3199                           ;mcc_generated_files/tmr1.c: 69:     T1GCON = 0x00;
  3200  035C  0020               	movlb	0	; select bank0
  3201  035D  0199               	clrf	25	;volatile
  3202  035E                     l1585:
  3203                           
  3204                           ;mcc_generated_files/tmr1.c: 72:     TMR1H = 0xF8;
  3205  035E  30F8               	movlw	248
  3206  035F  0097               	movwf	23	;volatile
  3207  0360                     l1587:
  3208                           
  3209                           ;mcc_generated_files/tmr1.c: 75:     TMR1L = 0x30;
  3210  0360  3030               	movlw	48
  3211  0361  0096               	movwf	22	;volatile
  3212  0362                     l1589:
  3213                           
  3214                           ;mcc_generated_files/tmr1.c: 78:     PIR1bits.TMR1IF = 0;
  3215  0362  1011               	bcf	17,0	;volatile
  3216  0363                     l1591:
  3217                           
  3218                           ;mcc_generated_files/tmr1.c: 81:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  3219  0363  0817               	movf	23,w	;volatile
  3220  0364  00ED               	movwf	_timer1ReloadVal+1	;volatile
  3221  0365  0816               	movf	22,w	;volatile
  3222  0366  00EC               	movwf	_timer1ReloadVal	;volatile
  3223  0367                     l1593:
  3224                           
  3225                           ;mcc_generated_files/tmr1.c: 84:     PIE1bits.TMR1IE = 1;
  3226  0367  0021               	movlb	1	; select bank1
  3227  0368  1411               	bsf	17,0	;volatile
  3228  0369                     l1595:
  3229                           
  3230                           ;mcc_generated_files/tmr1.c: 87:     TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandl
      +                          er);
  3231  0369  303D               	movlw	low _TMR1_DefaultInterruptHandler
  3232  036A  0020               	movlb	0	; select bank0
  3233  036B  00A0               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  3234  036C  3004               	movlw	high _TMR1_DefaultInterruptHandler
  3235  036D  00A1               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  3236  036E  3184  2421  3183   	fcall	_TMR1_SetInterruptHandler
  3237  0371                     l1597:
  3238                           
  3239                           ;mcc_generated_files/tmr1.c: 90:     T1CON = 0x01;
  3240  0371  3001               	movlw	1
  3241  0372  0020               	movlb	0	; select bank0
  3242  0373  0098               	movwf	24	;volatile
  3243  0374                     l134:
  3244  0374  0008               	return
  3245  0375                     __end_of_TMR1_Initialize:
  3246                           
  3247                           	psect	text10
  3248  0421                     __ptext10:	
  3249 ;; *************** function _TMR1_SetInterruptHandler *****************
  3250 ;; Defined at:
  3251 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3254 ;;		 -> incCurrentTimeMillis(1), TMR1_DefaultInterruptHandler(1), 
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;		None
  3257 ;; Return value:  Size  Location     Type
  3258 ;;                  1    wreg      void 
  3259 ;; Registers used:
  3260 ;;		wreg
  3261 ;; Tracked objects:
  3262 ;;		On entry : 0/0
  3263 ;;		On exit  : 0/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3266 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3269 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3270 ;;Total ram usage:        2 bytes
  3271 ;; Hardware stack levels used:    1
  3272 ;; Hardware stack levels required when called:    4
  3273 ;; This function calls:
  3274 ;;		Nothing
  3275 ;; This function is called by:
  3276 ;;		_TMR1_Initialize
  3277 ;;		_tasks
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           
  3282                           ;psect for function _TMR1_SetInterruptHandler
  3283  0421                     _TMR1_SetInterruptHandler:
  3284  0421                     l1557:	
  3285                           ;incstack = 0
  3286                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  3287                           
  3288                           
  3289                           ;mcc_generated_files/tmr1.c: 179:     TMR1_InterruptHandler = InterruptHandler;
  3290  0421  0020               	movlb	0	; select bank0
  3291  0422  0821               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  3292  0423  00EB               	movwf	_TMR1_InterruptHandler+1
  3293  0424  0820               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  3294  0425  00EA               	movwf	_TMR1_InterruptHandler
  3295  0426                     l167:
  3296  0426  0008               	return
  3297  0427                     __end_of_TMR1_SetInterruptHandler:
  3298                           
  3299                           	psect	text11
  3300  0375                     __ptext11:	
  3301 ;; *************** function _PIN_MANAGER_Initialize *****************
  3302 ;; Defined at:
  3303 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3304 ;; Parameters:    Size  Location     Type
  3305 ;;		None
  3306 ;; Auto vars:     Size  Location     Type
  3307 ;;		None
  3308 ;; Return value:  Size  Location     Type
  3309 ;;                  1    wreg      void 
  3310 ;; Registers used:
  3311 ;;		wreg, status,2
  3312 ;; Tracked objects:
  3313 ;;		On entry : 0/0
  3314 ;;		On exit  : 0/0
  3315 ;;		Unchanged: 0/0
  3316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3320 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3321 ;;Total ram usage:        0 bytes
  3322 ;; Hardware stack levels used:    1
  3323 ;; Hardware stack levels required when called:    4
  3324 ;; This function calls:
  3325 ;;		Nothing
  3326 ;; This function is called by:
  3327 ;;		_SYSTEM_Initialize
  3328 ;; This function uses a non-reentrant model
  3329 ;;
  3330                           
  3331                           
  3332                           ;psect for function _PIN_MANAGER_Initialize
  3333  0375                     _PIN_MANAGER_Initialize:
  3334  0375                     l1563:	
  3335                           ;incstack = 0
  3336                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3337                           
  3338                           
  3339                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  3340  0375  0022               	movlb	2	; select bank2
  3341  0376  018C               	clrf	12	;volatile
  3342                           
  3343                           ;mcc_generated_files/pin_manager.c: 61:     LATC = 0x00;
  3344  0377  018E               	clrf	14	;volatile
  3345  0378                     l1565:
  3346                           
  3347                           ;mcc_generated_files/pin_manager.c: 66:     TRISA = 0x3F;
  3348  0378  303F               	movlw	63
  3349  0379  0021               	movlb	1	; select bank1
  3350  037A  008C               	movwf	12	;volatile
  3351  037B                     l1567:
  3352                           
  3353                           ;mcc_generated_files/pin_manager.c: 67:     TRISC = 0x37;
  3354  037B  3037               	movlw	55
  3355  037C  008E               	movwf	14	;volatile
  3356  037D                     l1569:
  3357                           
  3358                           ;mcc_generated_files/pin_manager.c: 72:     ANSELC = 0x07;
  3359  037D  3007               	movlw	7
  3360  037E  0023               	movlb	3	; select bank3
  3361  037F  008E               	movwf	14	;volatile
  3362  0380                     l1571:
  3363                           
  3364                           ;mcc_generated_files/pin_manager.c: 73:     ANSELA = 0x17;
  3365  0380  3017               	movlw	23
  3366  0381  008C               	movwf	12	;volatile
  3367                           
  3368                           ;mcc_generated_files/pin_manager.c: 78:     WPUA = 0x00;
  3369  0382  0024               	movlb	4	; select bank4
  3370  0383  018C               	clrf	12	;volatile
  3371                           
  3372                           ;mcc_generated_files/pin_manager.c: 79:     WPUC = 0x00;
  3373  0384  018E               	clrf	14	;volatile
  3374  0385                     l1573:
  3375                           
  3376                           ;mcc_generated_files/pin_manager.c: 80:     OPTION_REGbits.nWPUEN = 1;
  3377  0385  0021               	movlb	1	; select bank1
  3378  0386  1795               	bsf	21,7	;volatile
  3379                           
  3380                           ;mcc_generated_files/pin_manager.c: 86:     APFCON0 = 0x00;
  3381  0387  0022               	movlb	2	; select bank2
  3382  0388  019D               	clrf	29	;volatile
  3383                           
  3384                           ;mcc_generated_files/pin_manager.c: 87:     APFCON1 = 0x00;
  3385  0389  019E               	clrf	30	;volatile
  3386  038A                     l25:
  3387  038A  0008               	return
  3388  038B                     __end_of_PIN_MANAGER_Initialize:
  3389                           
  3390                           	psect	text12
  3391  040E                     __ptext12:	
  3392 ;; *************** function _OSCILLATOR_Initialize *****************
  3393 ;; Defined at:
  3394 ;;		line 60 in file "mcc_generated_files/mcc.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;		None
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;		None
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  1    wreg      void 
  3401 ;; Registers used:
  3402 ;;		wreg, status,2
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3412 ;;Total ram usage:        0 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; Hardware stack levels required when called:    4
  3415 ;; This function calls:
  3416 ;;		Nothing
  3417 ;; This function is called by:
  3418 ;;		_SYSTEM_Initialize
  3419 ;; This function uses a non-reentrant model
  3420 ;;
  3421                           
  3422                           
  3423                           ;psect for function _OSCILLATOR_Initialize
  3424  040E                     _OSCILLATOR_Initialize:
  3425  040E                     l1599:	
  3426                           ;incstack = 0
  3427                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3428                           
  3429                           
  3430                           ;mcc_generated_files/mcc.c: 63:     OSCCON = 0x72;
  3431  040E  3072               	movlw	114
  3432  040F  0021               	movlb	1	; select bank1
  3433  0410  0099               	movwf	25	;volatile
  3434  0411                     l1601:
  3435                           
  3436                           ;mcc_generated_files/mcc.c: 65:     OSCTUNE = 0x00;
  3437  0411  0198               	clrf	24	;volatile
  3438  0412                     l1603:
  3439                           
  3440                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  3441  0412  0022               	movlb	2	; select bank2
  3442  0413  0196               	clrf	22	;volatile
  3443  0414                     l194:
  3444  0414  0008               	return
  3445  0415                     __end_of_OSCILLATOR_Initialize:
  3446                           
  3447                           	psect	text13
  3448  03BF                     __ptext13:	
  3449 ;; *************** function _ADC_Initialize *****************
  3450 ;; Defined at:
  3451 ;;		line 67 in file "mcc_generated_files/adc.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;		None
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;		None
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      void 
  3458 ;; Registers used:
  3459 ;;		wreg, status,2, status,0, pclath, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3469 ;;Total ram usage:        0 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:    5
  3472 ;; This function calls:
  3473 ;;		_ADC_SetInterruptHandler
  3474 ;; This function is called by:
  3475 ;;		_SYSTEM_Initialize
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           
  3480                           ;psect for function _ADC_Initialize
  3481  03BF                     _ADC_Initialize:
  3482  03BF                     l1575:	
  3483                           ;incstack = 0
  3484                           ; Regs used in _ADC_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3485                           
  3486                           
  3487                           ;mcc_generated_files/adc.c: 72:     ADCON1 = 0x00;
  3488  03BF  0021               	movlb	1	; select bank1
  3489  03C0  019E               	clrf	30	;volatile
  3490                           
  3491                           ;mcc_generated_files/adc.c: 75:     ADRESL = 0x00;
  3492  03C1  019B               	clrf	27	;volatile
  3493                           
  3494                           ;mcc_generated_files/adc.c: 78:     ADRESH = 0x00;
  3495  03C2  019C               	clrf	28	;volatile
  3496  03C3                     l1577:
  3497                           
  3498                           ;mcc_generated_files/adc.c: 81:     ADCON0 = 0x01;
  3499  03C3  3001               	movlw	1
  3500  03C4  009D               	movwf	29	;volatile
  3501  03C5                     l1579:
  3502                           
  3503                           ;mcc_generated_files/adc.c: 84:     PIE1bits.ADIE = 1;
  3504  03C5  1711               	bsf	17,6	;volatile
  3505  03C6                     l1581:
  3506                           
  3507                           ;mcc_generated_files/adc.c: 87:     ADC_SetInterruptHandler(ADC_DefaultInterruptHandler)
      +                          ;
  3508  03C6  303E               	movlw	low _ADC_DefaultInterruptHandler
  3509  03C7  0020               	movlb	0	; select bank0
  3510  03C8  00A0               	movwf	ADC_SetInterruptHandler@InterruptHandler
  3511  03C9  3004               	movlw	high _ADC_DefaultInterruptHandler
  3512  03CA  00A1               	movwf	ADC_SetInterruptHandler@InterruptHandler+1
  3513  03CB  3184  2427  3183   	fcall	_ADC_SetInterruptHandler
  3514  03CE                     l53:
  3515  03CE  0008               	return
  3516  03CF                     __end_of_ADC_Initialize:
  3517                           
  3518                           	psect	text14
  3519  0427                     __ptext14:	
  3520 ;; *************** function _ADC_SetInterruptHandler *****************
  3521 ;; Defined at:
  3522 ;;		line 156 in file "mcc_generated_files/adc.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  3525 ;;		 -> read(1), ADC_DefaultInterruptHandler(1), 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;		None
  3528 ;; Return value:  Size  Location     Type
  3529 ;;                  1    wreg      void 
  3530 ;; Registers used:
  3531 ;;		wreg
  3532 ;; Tracked objects:
  3533 ;;		On entry : 0/0
  3534 ;;		On exit  : 0/0
  3535 ;;		Unchanged: 0/0
  3536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3537 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3540 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3541 ;;Total ram usage:        2 bytes
  3542 ;; Hardware stack levels used:    1
  3543 ;; Hardware stack levels required when called:    4
  3544 ;; This function calls:
  3545 ;;		Nothing
  3546 ;; This function is called by:
  3547 ;;		_ADC_Initialize
  3548 ;;		_tasks
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           
  3553                           ;psect for function _ADC_SetInterruptHandler
  3554  0427                     _ADC_SetInterruptHandler:
  3555  0427                     l1555:	
  3556                           ;incstack = 0
  3557                           ; Regs used in _ADC_SetInterruptHandler: [wreg]
  3558                           
  3559                           
  3560                           ;mcc_generated_files/adc.c: 157:     ADC_InterruptHandler = InterruptHandler;
  3561  0427  0020               	movlb	0	; select bank0
  3562  0428  0821               	movf	ADC_SetInterruptHandler@InterruptHandler+1,w
  3563  0429  00EF               	movwf	_ADC_InterruptHandler+1
  3564  042A  0820               	movf	ADC_SetInterruptHandler@InterruptHandler,w
  3565  042B  00EE               	movwf	_ADC_InterruptHandler
  3566  042C                     l81:
  3567  042C  0008               	return
  3568  042D                     __end_of_ADC_SetInterruptHandler:
  3569                           
  3570                           	psect	intentry
  3571  0004                     __pintentry:	
  3572 ;; *************** function _INTERRUPT_InterruptManager *****************
  3573 ;; Defined at:
  3574 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  3575 ;; Parameters:    Size  Location     Type
  3576 ;;		None
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;		None
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      void 
  3581 ;; Registers used:
  3582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3592 ;;Total ram usage:        0 bytes
  3593 ;; Hardware stack levels used:    1
  3594 ;; Hardware stack levels required when called:    3
  3595 ;; This function calls:
  3596 ;;		_ADC_ISR
  3597 ;;		_TMR1_ISR
  3598 ;; This function is called by:
  3599 ;;		Interrupt level 1
  3600 ;; This function uses a non-reentrant model
  3601 ;;
  3602                           
  3603  0004                     _INTERRUPT_InterruptManager:
  3604                           
  3605                           ;incstack = 0
  3606  0004  147E               	bsf	int$flags,0	;set compiler interrupt flag (level 1)
  3607                           
  3608                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3609  0005  3180               	pagesel	$
  3610  0006                     i1l1463:
  3611                           
  3612                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  3613  0006  1F0B               	btfss	11,6	;volatile
  3614  0007  2809               	goto	u39_21
  3615  0008  280A               	goto	u39_20
  3616  0009                     u39_21:
  3617  0009  2826               	goto	i1l105
  3618  000A                     u39_20:
  3619  000A                     i1l1465:
  3620                           
  3621                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  3622  000A  0021               	movlb	1	; select bank1
  3623  000B  1F11               	btfss	17,6	;volatile
  3624  000C  280E               	goto	u40_21
  3625  000D  280F               	goto	u40_20
  3626  000E                     u40_21:
  3627  000E  2818               	goto	i1l100
  3628  000F                     u40_20:
  3629  000F                     i1l1467:
  3630  000F  0020               	movlb	0	; select bank0
  3631  0010  1F11               	btfss	17,6	;volatile
  3632  0011  2813               	goto	u41_21
  3633  0012  2814               	goto	u41_20
  3634  0013                     u41_21:
  3635  0013  2818               	goto	i1l100
  3636  0014                     u41_20:
  3637  0014                     i1l1469:
  3638                           
  3639                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             ADC_ISR();
  3640  0014  3183  23CF  3180   	fcall	_ADC_ISR
  3641                           
  3642                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  3643  0017  2826               	goto	i1l105
  3644  0018                     i1l100:	
  3645                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
  3646                           
  3647  0018  0021               	movlb	1	; select bank1
  3648  0019  1C11               	btfss	17,0	;volatile
  3649  001A  281C               	goto	u42_21
  3650  001B  281D               	goto	u42_20
  3651  001C                     u42_21:
  3652  001C  2826               	goto	i1l101
  3653  001D                     u42_20:
  3654  001D                     i1l1471:
  3655  001D  0020               	movlb	0	; select bank0
  3656  001E  1C11               	btfss	17,0	;volatile
  3657  001F  2821               	goto	u43_21
  3658  0020  2822               	goto	u43_20
  3659  0021                     u43_21:
  3660  0021  2826               	goto	i1l101
  3661  0022                     u43_20:
  3662  0022                     i1l1473:
  3663                           
  3664                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             TMR1_ISR();
  3665  0022  3183  23DD  3180   	fcall	_TMR1_ISR
  3666                           
  3667                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  3668  0025  2826               	goto	i1l105
  3669  0026                     i1l101:
  3670  0026                     i1l105:	
  3671                           ;mcc_generated_files/interrupt_manager.c: 69:     }
  3672                           
  3673  0026  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3674  0027  0009               	retfie
  3675  0028                     __end_of_INTERRUPT_InterruptManager:
  3676                           
  3677                           	psect	text16
  3678  03DD                     __ptext16:	
  3679 ;; *************** function _TMR1_ISR *****************
  3680 ;; Defined at:
  3681 ;;		line 157 in file "mcc_generated_files/tmr1.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  1    wreg      void 
  3688 ;; Registers used:
  3689 ;;		wreg, status,2, status,0, pclath, cstack
  3690 ;; Tracked objects:
  3691 ;;		On entry : 0/0
  3692 ;;		On exit  : 0/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3699 ;;Total ram usage:        0 bytes
  3700 ;; Hardware stack levels used:    1
  3701 ;; Hardware stack levels required when called:    2
  3702 ;; This function calls:
  3703 ;;		_TMR1_CallBack
  3704 ;;		_TMR1_WriteTimer
  3705 ;; This function is called by:
  3706 ;;		_INTERRUPT_InterruptManager
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _TMR1_ISR
  3712  03DD                     _TMR1_ISR:
  3713  03DD                     i1l1411:	
  3714                           ;incstack = 0
  3715                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  3716                           
  3717                           
  3718                           ;mcc_generated_files/tmr1.c: 161:     PIR1bits.TMR1IF = 0;
  3719  03DD  0020               	movlb	0	; select bank0
  3720  03DE  1011               	bcf	17,0	;volatile
  3721  03DF                     i1l1413:
  3722                           
  3723                           ;mcc_generated_files/tmr1.c: 162:     TMR1_WriteTimer(timer1ReloadVal);
  3724  03DF  086D               	movf	_timer1ReloadVal+1,w	;volatile
  3725  03E0  00F7               	movwf	TMR1_WriteTimer@timerVal+1
  3726  03E1  086C               	movf	_timer1ReloadVal,w	;volatile
  3727  03E2  00F6               	movwf	TMR1_WriteTimer@timerVal
  3728  03E3  3183  239E  3183   	fcall	_TMR1_WriteTimer
  3729                           
  3730                           ;mcc_generated_files/tmr1.c: 166:     TMR1_CallBack();
  3731  03E6  3183  23EA  3183   	fcall	_TMR1_CallBack
  3732  03E9                     i1l160:
  3733  03E9  0008               	return
  3734  03EA                     __end_of_TMR1_ISR:
  3735                           
  3736                           	psect	text17
  3737  039E                     __ptext17:	
  3738 ;; *************** function _TMR1_WriteTimer *****************
  3739 ;; Defined at:
  3740 ;;		line 120 in file "mcc_generated_files/tmr1.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  timerVal        2    0[COMMON] unsigned short 
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;		None
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  1    wreg      void 
  3747 ;; Registers used:
  3748 ;;		wreg, status,2
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3757 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3758 ;;Total ram usage:        2 bytes
  3759 ;; Hardware stack levels used:    1
  3760 ;; This function calls:
  3761 ;;		Nothing
  3762 ;; This function is called by:
  3763 ;;		_TMR1_ISR
  3764 ;;		_TMR1_Reload
  3765 ;; This function uses a non-reentrant model
  3766 ;;
  3767                           
  3768                           
  3769                           ;psect for function _TMR1_WriteTimer
  3770  039E                     _TMR1_WriteTimer:
  3771  039E                     i1l1303:	
  3772                           ;incstack = 0
  3773                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
  3774                           
  3775                           
  3776                           ;mcc_generated_files/tmr1.c: 120: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 121: {;mcc_generated_files/tmr1.c: 122:     if (T1CONbits.nT1SYNC == 1)
  3777  039E  0020               	movlb	0	; select bank0
  3778  039F  1D18               	btfss	24,2	;volatile
  3779  03A0  2BA2               	goto	u23_21
  3780  03A1  2BA3               	goto	u23_20
  3781  03A2                     u23_21:
  3782  03A2  2BAA               	goto	i1l1313
  3783  03A3                     u23_20:
  3784  03A3                     i1l1305:
  3785                           
  3786                           ;mcc_generated_files/tmr1.c: 123:     {;mcc_generated_files/tmr1.c: 125:         T1CONbi
      +                          ts.TMR1ON = 0;
  3787  03A3  1018               	bcf	24,0	;volatile
  3788  03A4                     i1l1307:
  3789                           
  3790                           ;mcc_generated_files/tmr1.c: 128:         TMR1H = (uint8_t)(timerVal >> 8);
  3791  03A4  0877               	movf	TMR1_WriteTimer@timerVal+1,w
  3792  03A5  0097               	movwf	23	;volatile
  3793  03A6                     i1l1309:
  3794                           
  3795                           ;mcc_generated_files/tmr1.c: 129:         TMR1L = (uint8_t)timerVal;
  3796  03A6  0876               	movf	TMR1_WriteTimer@timerVal,w
  3797  03A7  0096               	movwf	22	;volatile
  3798  03A8                     i1l1311:
  3799                           
  3800                           ;mcc_generated_files/tmr1.c: 132:         T1CONbits.TMR1ON =1;
  3801  03A8  1418               	bsf	24,0	;volatile
  3802                           
  3803                           ;mcc_generated_files/tmr1.c: 133:     }
  3804  03A9  2BAE               	goto	i1l148
  3805  03AA                     i1l1313:
  3806                           
  3807                           ;mcc_generated_files/tmr1.c: 135:     {;mcc_generated_files/tmr1.c: 137:         TMR1H =
      +                           (uint8_t)(timerVal >> 8);
  3808  03AA  0877               	movf	TMR1_WriteTimer@timerVal+1,w
  3809  03AB  0097               	movwf	23	;volatile
  3810  03AC                     i1l1315:
  3811                           
  3812                           ;mcc_generated_files/tmr1.c: 138:         TMR1L = (uint8_t)timerVal;
  3813  03AC  0876               	movf	TMR1_WriteTimer@timerVal,w
  3814  03AD  0096               	movwf	22	;volatile
  3815  03AE                     i1l148:
  3816  03AE  0008               	return
  3817  03AF                     __end_of_TMR1_WriteTimer:
  3818                           
  3819                           	psect	text18
  3820  03EA                     __ptext18:	
  3821 ;; *************** function _TMR1_CallBack *****************
  3822 ;; Defined at:
  3823 ;;		line 169 in file "mcc_generated_files/tmr1.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;		None
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;		None
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  1    wreg      void 
  3830 ;; Registers used:
  3831 ;;		wreg, status,2, status,0, pclath, cstack
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3841 ;;Total ram usage:        0 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:    1
  3844 ;; This function calls:
  3845 ;;		Absolute function
  3846 ;;		_TMR1_DefaultInterruptHandler
  3847 ;;		_incCurrentTimeMillis
  3848 ;; This function is called by:
  3849 ;;		_TMR1_ISR
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853                           
  3854                           ;psect for function _TMR1_CallBack
  3855  03EA                     _TMR1_CallBack:
  3856  03EA                     i1l1317:	
  3857                           ;incstack = 0
  3858                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
  3859                           
  3860                           
  3861                           ;mcc_generated_files/tmr1.c: 172:     if(TMR1_InterruptHandler)
  3862  03EA  0020               	movlb	0	; select bank0
  3863  03EB  086A               	movf	_TMR1_InterruptHandler,w
  3864  03EC  046B               	iorwf	_TMR1_InterruptHandler+1,w
  3865  03ED  1903               	btfsc	3,2
  3866  03EE  2BF0               	goto	u24_21
  3867  03EF  2BF1               	goto	u24_20
  3868  03F0                     u24_21:
  3869  03F0  2BF6               	goto	i1l164
  3870  03F1                     u24_20:
  3871  03F1                     i1l1319:
  3872                           
  3873                           ;mcc_generated_files/tmr1.c: 173:     {;mcc_generated_files/tmr1.c: 174:         TMR1_In
      +                          terruptHandler();
  3874  03F1  086B               	movf	_TMR1_InterruptHandler+1,w
  3875  03F2  008A               	movwf	10
  3876  03F3  086A               	movf	_TMR1_InterruptHandler,w
  3877  03F4  000A               	callw
  3878  03F5  3183               	pagesel	$
  3879  03F6                     i1l164:
  3880  03F6  0008               	return
  3881  03F7                     __end_of_TMR1_CallBack:
  3882                           
  3883                           	psect	text19
  3884  043D                     __ptext19:	
  3885 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  3886 ;; Defined at:
  3887 ;;		line 182 in file "mcc_generated_files/tmr1.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;		None
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		None
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3905 ;;Total ram usage:        0 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_TMR1_Initialize
  3911 ;;		_TMR1_CallBack
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           
  3916                           ;psect for function _TMR1_DefaultInterruptHandler
  3917  043D                     _TMR1_DefaultInterruptHandler:
  3918  043D                     i1l170:	
  3919                           ;incstack = 0
  3920                           ; Regs used in _TMR1_DefaultInterruptHandler: []
  3921                           
  3922  043D  0008               	return
  3923  043E                     __end_of_TMR1_DefaultInterruptHandler:
  3924                           
  3925                           	psect	text20
  3926  03F7                     __ptext20:	
  3927 ;; *************** function _incCurrentTimeMillis *****************
  3928 ;; Defined at:
  3929 ;;		line 30 in file "TimeSystem.c"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;		None
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;		None
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  1    wreg      void 
  3936 ;; Registers used:
  3937 ;;		wreg, status,2, status,0
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3947 ;;Total ram usage:        0 bytes
  3948 ;; Hardware stack levels used:    1
  3949 ;; This function calls:
  3950 ;;		Nothing
  3951 ;; This function is called by:
  3952 ;;		_TMR1_CallBack
  3953 ;; This function uses a non-reentrant model
  3954 ;;
  3955                           
  3956                           
  3957                           ;psect for function _incCurrentTimeMillis
  3958  03F7                     _incCurrentTimeMillis:
  3959  03F7                     i1l1277:	
  3960                           ;incstack = 0
  3961                           ; Regs used in _incCurrentTimeMillis: [wreg+status,2+status,0]
  3962                           
  3963                           
  3964                           ;TimeSystem.c: 31:     instance.currentTimeMillis++;
  3965  03F7  3001               	movlw	1
  3966  03F8  0020               	movlb	0	; select bank0
  3967  03F9  07E0               	addwf	_instance,f
  3968  03FA  3000               	movlw	0
  3969  03FB  3DE1               	addwfc	_instance+1,f
  3970  03FC  3DE2               	addwfc	_instance+2,f
  3971  03FD  3DE3               	addwfc	_instance+3,f
  3972  03FE  3DE4               	addwfc	_instance+4,f
  3973  03FF  3DE5               	addwfc	_instance+5,f
  3974  0400  3DE6               	addwfc	_instance+6,f
  3975  0401  3DE7               	addwfc	_instance+7,f
  3976  0402                     i1l221:
  3977  0402  0008               	return
  3978  0403                     __end_of_incCurrentTimeMillis:
  3979                           
  3980                           	psect	text21
  3981  03CF                     __ptext21:	
  3982 ;; *************** function _ADC_ISR *****************
  3983 ;; Defined at:
  3984 ;;		line 145 in file "mcc_generated_files/adc.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;		None
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      void 
  3991 ;; Registers used:
  3992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4002 ;;Total ram usage:        0 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    2
  4005 ;; This function calls:
  4006 ;;		Absolute function
  4007 ;;		_ADC_DefaultInterruptHandler
  4008 ;;		_read
  4009 ;; This function is called by:
  4010 ;;		_INTERRUPT_InterruptManager
  4011 ;; This function uses a non-reentrant model
  4012 ;;
  4013                           
  4014                           
  4015                           ;psect for function _ADC_ISR
  4016  03CF                     _ADC_ISR:
  4017  03CF                     i1l1405:	
  4018                           ;incstack = 0
  4019                           ; Regs used in _ADC_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4020                           
  4021                           
  4022                           ;mcc_generated_files/adc.c: 148:     PIR1bits.ADIF = 0;
  4023  03CF  0020               	movlb	0	; select bank0
  4024  03D0  1311               	bcf	17,6	;volatile
  4025  03D1                     i1l1407:
  4026                           
  4027                           ;mcc_generated_files/adc.c: 150:  if(ADC_InterruptHandler)
  4028  03D1  086E               	movf	_ADC_InterruptHandler,w
  4029  03D2  046F               	iorwf	_ADC_InterruptHandler+1,w
  4030  03D3  1903               	btfsc	3,2
  4031  03D4  2BD6               	goto	u32_21
  4032  03D5  2BD7               	goto	u32_20
  4033  03D6                     u32_21:
  4034  03D6  2BDC               	goto	i1l78
  4035  03D7                     u32_20:
  4036  03D7                     i1l1409:
  4037                           
  4038                           ;mcc_generated_files/adc.c: 151:     {;mcc_generated_files/adc.c: 152:         ADC_Inter
      +                          ruptHandler();
  4039  03D7  086F               	movf	_ADC_InterruptHandler+1,w
  4040  03D8  008A               	movwf	10
  4041  03D9  086E               	movf	_ADC_InterruptHandler,w
  4042  03DA  000A               	callw
  4043  03DB  3183               	pagesel	$
  4044  03DC                     i1l78:
  4045  03DC  0008               	return
  4046  03DD                     __end_of_ADC_ISR:
  4047                           
  4048                           	psect	text22
  4049  043E                     __ptext22:	
  4050 ;; *************** function _ADC_DefaultInterruptHandler *****************
  4051 ;; Defined at:
  4052 ;;		line 160 in file "mcc_generated_files/adc.c"
  4053 ;; Parameters:    Size  Location     Type
  4054 ;;		None
  4055 ;; Auto vars:     Size  Location     Type
  4056 ;;		None
  4057 ;; Return value:  Size  Location     Type
  4058 ;;                  1    wreg      void 
  4059 ;; Registers used:
  4060 ;;		None
  4061 ;; Tracked objects:
  4062 ;;		On entry : 0/0
  4063 ;;		On exit  : 0/0
  4064 ;;		Unchanged: 0/0
  4065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4070 ;;Total ram usage:        0 bytes
  4071 ;; Hardware stack levels used:    1
  4072 ;; This function calls:
  4073 ;;		Nothing
  4074 ;; This function is called by:
  4075 ;;		_ADC_Initialize
  4076 ;;		_ADC_ISR
  4077 ;; This function uses a non-reentrant model
  4078 ;;
  4079                           
  4080                           
  4081                           ;psect for function _ADC_DefaultInterruptHandler
  4082  043E                     _ADC_DefaultInterruptHandler:
  4083  043E                     i1l84:	
  4084                           ;incstack = 0
  4085                           ; Regs used in _ADC_DefaultInterruptHandler: []
  4086                           
  4087  043E  0008               	return
  4088  043F                     __end_of_ADC_DefaultInterruptHandler:
  4089                           
  4090                           	psect	text23
  4091  030D                     __ptext23:	
  4092 ;; *************** function _read *****************
  4093 ;; Defined at:
  4094 ;;		line 31 in file "ADCReader.c"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;		None
  4097 ;; Auto vars:     Size  Location     Type
  4098 ;;		None
  4099 ;; Return value:  Size  Location     Type
  4100 ;;                  1    wreg      void 
  4101 ;; Registers used:
  4102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4103 ;; Tracked objects:
  4104 ;;		On entry : 0/0
  4105 ;;		On exit  : 0/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4110 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4111 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4112 ;;Total ram usage:        2 bytes
  4113 ;; Hardware stack levels used:    1
  4114 ;; Hardware stack levels required when called:    1
  4115 ;; This function calls:
  4116 ;;		_ADC_GetConversionResult
  4117 ;; This function is called by:
  4118 ;;		_ADC_ISR
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121                           
  4122                           
  4123                           ;psect for function _read
  4124  030D                     _read:
  4125  030D                     i1l1385:	
  4126                           ;incstack = 0
  4127                           ; Regs used in _read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4128                           
  4129                           
  4130                           ;ADCReader.c: 32:     switch (self.state) {
  4131  030D  2B2F               	goto	i1l1397
  4132  030E                     i1l1387:
  4133                           
  4134                           ;ADCReader.c: 35:             self.setChannel(self.ampChannel);
  4135  030E  3009               	movlw	9
  4136  030F  3E4F               	addlw	(low (_self| 0))& (0+255)
  4137  0310  0086               	movwf	6
  4138  0311  0187               	clrf	7
  4139  0312  3F41               	moviw [1]fsr1
  4140  0313  008A               	movwf	10
  4141  0314  3F40               	moviw [0]fsr1
  4142  0315  000A               	callw
  4143  0316  3183               	pagesel	$
  4144  0317  0877               	movf	?_ADC_GetConversionResult+1,w
  4145  0318  0020               	movlb	0	; select bank0
  4146  0319  00D0               	movwf	_self+1
  4147  031A  0876               	movf	?_ADC_GetConversionResult,w
  4148  031B  00CF               	movwf	_self
  4149  031C                     i1l1389:
  4150                           
  4151                           ;ADCReader.c: 36:             self.state = ADC_READING_CURRENT;
  4152  031C  01D7               	clrf	_self+8
  4153  031D  0AD7               	incf	_self+8,f
  4154                           
  4155                           ;ADCReader.c: 37:             break;
  4156  031E  2B40               	goto	i1l314
  4157  031F                     i1l1391:
  4158                           
  4159                           ;ADCReader.c: 40:             self.setChannel(self.tempChannel);
  4160  031F  3009               	movlw	9
  4161  0320  3E4F               	addlw	(low (_self| 0))& (0+255)
  4162  0321  0086               	movwf	6
  4163  0322  0187               	clrf	7
  4164  0323  3F41               	moviw [1]fsr1
  4165  0324  008A               	movwf	10
  4166  0325  3F40               	moviw [0]fsr1
  4167  0326  000A               	callw
  4168  0327  3183               	pagesel	$
  4169  0328  0877               	movf	?_ADC_GetConversionResult+1,w
  4170  0329  0020               	movlb	0	; select bank0
  4171  032A  00D2               	movwf	_self+3
  4172  032B  0876               	movf	?_ADC_GetConversionResult,w
  4173  032C  00D1               	movwf	_self+2
  4174  032D                     i1l1393:
  4175                           
  4176                           ;ADCReader.c: 41:             self.state = ADC_READING_TEMP;
  4177  032D  01D7               	clrf	_self+8
  4178                           
  4179                           ;ADCReader.c: 42:             break;
  4180  032E  2B40               	goto	i1l314
  4181  032F                     i1l1397:
  4182  032F  0020               	movlb	0	; select bank0
  4183  0330  0857               	movf	_self+8,w
  4184  0331  00F8               	movwf	??_read
  4185  0332  01F9               	clrf	??_read+1
  4186                           
  4187                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4188                           ; Switch size 1, requested type "simple"
  4189                           ; Number of cases is 1, Range of values is 0 to 0
  4190                           ; switch strategies available:
  4191                           ; Name         Instructions Cycles
  4192                           ; simple_byte            4     3 (average)
  4193                           ; direct_byte            8     6 (fixed)
  4194                           ; jumptable            260     6 (fixed)
  4195                           ;	Chosen strategy is simple_byte
  4196  0333  0879               	movf	??_read+1,w
  4197  0334  3A00               	xorlw	0	; case 0
  4198  0335  1903               	skipnz
  4199  0336  2B38               	goto	i1l1803
  4200  0337  2B40               	goto	i1l314
  4201  0338                     i1l1803:
  4202                           
  4203                           ; Switch size 1, requested type "simple"
  4204                           ; Number of cases is 2, Range of values is 0 to 1
  4205                           ; switch strategies available:
  4206                           ; Name         Instructions Cycles
  4207                           ; simple_byte            7     4 (average)
  4208                           ; direct_byte           10     6 (fixed)
  4209                           ; jumptable            260     6 (fixed)
  4210                           ;	Chosen strategy is simple_byte
  4211  0338  0878               	movf	??_read,w
  4212  0339  3A00               	xorlw	0	; case 0
  4213  033A  1903               	skipnz
  4214  033B  2B0E               	goto	i1l1387
  4215  033C  3A01               	xorlw	1	; case 1
  4216  033D  1903               	skipnz
  4217  033E  2B1F               	goto	i1l1391
  4218  033F  2B40               	goto	i1l314
  4219  0340                     i1l314:
  4220  0340  0008               	return
  4221  0341                     __end_of_read:
  4222                           
  4223                           	psect	text24
  4224  042D                     __ptext24:	
  4225 ;; *************** function _ADC_GetConversionResult *****************
  4226 ;; Defined at:
  4227 ;;		line 111 in file "mcc_generated_files/adc.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;		None
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;		None
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  2    0[COMMON] unsigned short 
  4234 ;; Registers used:
  4235 ;;		wreg
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4241 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4245 ;;Total ram usage:        2 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; This function calls:
  4248 ;;		Nothing
  4249 ;; This function is called by:
  4250 ;;		_tasks
  4251 ;;		_read
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           
  4256                           ;psect for function _ADC_GetConversionResult
  4257  042D                     _ADC_GetConversionResult:
  4258  042D                     i1l1267:	
  4259                           ;incstack = 0
  4260                           ; Regs used in _ADC_GetConversionResult: [wreg]
  4261                           
  4262                           
  4263                           ;mcc_generated_files/adc.c: 114:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
  4264  042D  0021               	movlb	1	; select bank1
  4265  042E  081C               	movf	28,w	;volatile
  4266  042F  00F7               	movwf	?_ADC_GetConversionResult+1
  4267  0430  081B               	movf	27,w	;volatile
  4268  0431  00F6               	movwf	?_ADC_GetConversionResult
  4269  0432                     i1l65:
  4270  0432  0008               	return
  4271  0433                     __end_of_ADC_GetConversionResult:
  4272  007E                     btemp	set	126	;btemp
  4273  007E                     int$flags	set	126
  4274  007E                     wtemp0	set	126
  4275                           
  4276                           	psect	config
  4277                           
  4278                           ;Config register CONFIG1 @ 0x8007
  4279                           ;	Oscillator Selection
  4280                           ;	FOSC = INTOSC, INTOSC oscillator: I/O function on CLKIN pin
  4281                           ;	Watchdog Timer Enable
  4282                           ;	WDTE = OFF, WDT disabled
  4283                           ;	Power-up Timer Enable
  4284                           ;	PWRTE = OFF, PWRT disabled
  4285                           ;	MCLR Pin Function Select
  4286                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
  4287                           ;	Flash Program Memory Code Protection
  4288                           ;	CP = OFF, Program memory code protection is disabled
  4289                           ;	Data Memory Code Protection
  4290                           ;	CPD = OFF, Data memory code protection is disabled
  4291                           ;	Brown-out Reset Enable
  4292                           ;	BOREN = ON, Brown-out Reset enabled
  4293                           ;	Clock Out Enable
  4294                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
  4295                           ;	Internal/External Switchover
  4296                           ;	IESO = ON, Internal/External Switchover mode is enabled
  4297                           ;	Fail-Safe Clock Monitor Enable
  4298                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
  4299  8007                     	org	32775
  4300  8007  3FE4               	dw	16356
  4301                           
  4302                           ;Config register CONFIG2 @ 0x8008
  4303                           ;	Flash Memory Self-Write Protection
  4304                           ;	WRT = OFF, Write protection off
  4305                           ;	PLL Enable
  4306                           ;	PLLEN = ON, 4x PLL enabled
  4307                           ;	Stack Overflow/Underflow Reset Enable
  4308                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
  4309                           ;	Brown-out Reset Voltage Selection
  4310                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
  4311                           ;	Low-Voltage Programming Enable
  4312                           ;	LVP = OFF, High-voltage on MCLR/VPP must be used for programming
  4313  8008                     	org	32776
  4314  8008  1FFF               	dw	8191

Data Sizes:
    Strings     0
    Constant    0
    Data        28
    BSS         42
    Persistent  38
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4      11
    BANK0            80     47      80
    BANK1            80      0      36
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ?_GetADCReaderInstance.startConversion	PTR FTN()void  size(2) Largest target is 0

    ?_GetADCReaderInstance.setChannel	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ADC_SelectChannel(), 

    ?_GetADCReaderInstance.getResult	PTR FTN()unsigned short  size(2) Largest target is 2
		 -> ADC_GetConversionResult(), 

    ?_GetADCReaderInstance.init	PTR FTN()void  size(2) Largest target is 1
		 -> init(), 

    ?_GetADCReaderInstance.read	PTR FTN()void  size(2) Largest target is 1
		 -> read(), 

    ?_NewSensor.tasks	PTR FTN(PTR struct SENSOR_TAG,unsigned short ,)void  size(2) Largest target is 1
		 -> sensorTasks(), Absolute function(), 

    S523$4$0	PTR struct SENSOR_TAG size(1) Largest target is 12
		 -> ampSensor(BANK1[12]), temperatureSensor(BANK1[12]), 

    GetADCReaderInstance@start	PTR FTN()void  size(2) Largest target is 1
		 -> ADC_StartConversion(), 

    ?_GetTimeSystemInstance.incCurrentTimeMillis	PTR FTN()void  size(2) Largest target is 1
		 -> incCurrentTimeMillis(), 

    sp__GetADCReaderInstance.startConversion	PTR FTN()void  size(2) Largest target is 0

    sp__GetADCReaderInstance.setChannel	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ADC_SelectChannel(), 

    sp__GetADCReaderInstance.getResult	PTR FTN()unsigned short  size(2) Largest target is 2
		 -> ADC_GetConversionResult(), 

    sp__GetADCReaderInstance.init	PTR FTN()void  size(2) Largest target is 1
		 -> init(), 

    sp__GetADCReaderInstance.read	PTR FTN()void  size(2) Largest target is 1
		 -> read(), 

    GetADCReaderInstance@getResult	PTR FTN()unsigned short  size(2) Largest target is 2
		 -> ADC_GetConversionResult(), 

    GetADCReaderInstance@setChannel	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ADC_SelectChannel(), 

    self.startConversion	PTR FTN()void  size(2) Largest target is 0

    self.setChannel	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> i1_ADC_SelectChannel(), ADC_SelectChannel(), 

    self.getResult	PTR FTN()unsigned short  size(2) Largest target is 2
		 -> ADC_GetConversionResult(), 

    self.init	PTR FTN()void  size(2) Largest target is 1
		 -> init(), 

    self.read	PTR FTN()void  size(2) Largest target is 1
		 -> read(), 

    ss.tasks	PTR FTN(PTR struct SENSOR_TAG,unsigned short ,)void  size(2) Largest target is 1
		 -> sensorTasks(), Absolute function(), 

    F69.tasks	PTR FTN(PTR struct SENSOR_TAG,unsigned short ,)void  size(2) Largest target is 1
		 -> sensorTasks(), Absolute function(), 

    timer@Sensor$F674.incCurrentTimeMillis	PTR FTN()void  size(2) Largest target is 1
		 -> incCurrentTimeMillis(), 

    timer@Sensor$F674	PTR struct . size(1) Largest target is 10
		 -> NULL(NULL[0]), instance(BANK0[10]), 

    sensorTasks@this.tasks	PTR FTN(PTR struct SENSOR_TAG,unsigned short ,)void  size(2) Largest target is 1
		 -> sensorTasks(), Absolute function(), 

    sensorTasks@this	PTR struct SENSOR_TAG size(1) Largest target is 12
		 -> ampSensor(BANK1[12]), temperatureSensor(BANK1[12]), 

    S544$startConversion	PTR FTN()void  size(2) Largest target is 0

    adc.startConversion	PTR FTN()void  size(2) Largest target is 0

    S544$setChannel	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ADC_SelectChannel(), 

    adc.setChannel	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> ADC_SelectChannel(), 

    S544$getResult	PTR FTN()unsigned short  size(2) Largest target is 2
		 -> ADC_GetConversionResult(), 

    adc.getResult	PTR FTN()unsigned short  size(2) Largest target is 2
		 -> ADC_GetConversionResult(), 

    S544$init	PTR FTN()void  size(2) Largest target is 1
		 -> init(), 

    adc.init	PTR FTN()void  size(2) Largest target is 1
		 -> init(), 

    S544$read	PTR FTN()void  size(2) Largest target is 1
		 -> read(), 

    adc.read	PTR FTN()void  size(2) Largest target is 1
		 -> read(), 

    sp__GetADCReaderInstance	PTR struct . size(1) Largest target is 17
		 -> self(BANK0[17]), 

    adc	PTR struct . size(1) Largest target is 17
		 -> NULL(NULL[0]), self(BANK0[17]), 

    timer.incCurrentTimeMillis	PTR FTN()void  size(2) Largest target is 1
		 -> incCurrentTimeMillis(), 

    timer	PTR struct . size(1) Largest target is 10
		 -> NULL(NULL[0]), instance(BANK0[10]), 

    ampSensor.tasks	PTR FTN(PTR struct SENSOR_TAG,unsigned short ,)void  size(2) Largest target is 1
		 -> sensorTasks(), Absolute function(), 

    S523SENSOR_TAG$tasks	PTR FTN(PTR struct SENSOR_TAG,unsigned short ,)void  size(2) Largest target is 1
		 -> sensorTasks(), Absolute function(), 

    temperatureSensor.tasks	PTR FTN(PTR struct SENSOR_TAG,unsigned short ,)void  size(2) Largest target is 1
		 -> sensorTasks(), Absolute function(), 

    sp__GetTimeSystemInstance.incCurrentTimeMillis	PTR FTN()void  size(2) Largest target is 1
		 -> incCurrentTimeMillis(), 

    sp__GetTimeSystemInstance	PTR struct . size(1) Largest target is 10
		 -> instance(BANK0[10]), 

    S491$incCurrentTimeMillis	PTR FTN()void  size(2) Largest target is 1
		 -> incCurrentTimeMillis(), 

    instance.incCurrentTimeMillis	PTR FTN()void  size(2) Largest target is 1
		 -> incCurrentTimeMillis(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> incCurrentTimeMillis(), TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> incCurrentTimeMillis(), TMR1_DefaultInterruptHandler(), Absolute function(), 

    ADC_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> read(), ADC_DefaultInterruptHandler(), 

    ADC_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> read(), Absolute function(), ADC_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR1_ISR->_TMR1_WriteTimer
    _ADC_ISR->_read
    _read->_ADC_GetConversionResult

Critical Paths under _main in BANK0

    _main->_tasks
    _tasks->_sensorTasks
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _ADC_Initialize->_ADC_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3184
                  _SYSTEM_Initialize
                              _tasks
 ---------------------------------------------------------------------------------
 (1) _tasks                                               16    16      0    2762
                                             31 BANK0     16    16      0
                   Absolute function *
            _ADC_SetInterruptHandler
               _GetADCReaderInstance
              _GetTimeSystemInstance
                          _NewSensor
           _TMR1_SetInterruptHandler
                               _init *
                        _sensorTasks *
 ---------------------------------------------------------------------------------
 (2) _sensorTasks                                         31    28      3     911
                                              0 BANK0     31    28      3
 ---------------------------------------------------------------------------------
 (2) _init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _NewSensor                                           25    13     12     855
                                              0 BANK0     25    13     12
              _GetTimeSystemInstance
 ---------------------------------------------------------------------------------
 (3) _GetTimeSystemInstance                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetADCReaderInstance                                 9     1      8     574
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     422
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0     211
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _TMR1_SetInterruptHandler                             2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0     211
            _ADC_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (2) _ADC_SetInterruptHandler                              2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0     240
                            _ADC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             0     0      0     240
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_WriteTimer                                      2     0      2     240
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (6) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
               _incCurrentTimeMillis *
 ---------------------------------------------------------------------------------
 (7) _incCurrentTimeMillis                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_ISR                                              0     0      0       0
                   Absolute function *
        _ADC_DefaultInterruptHandler *
                               _read *
 ---------------------------------------------------------------------------------
 (6) _read                                                 2     2      0       0
                                              2 COMMON     2     2      0
            _ADC_GetConversionResult *
 ---------------------------------------------------------------------------------
 (7) _ADC_GetConversionResult                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (6) _ADC_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _ADC_Initialize
       _ADC_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize
   _tasks
     Absolute function(Fake) *
     _ADC_SetInterruptHandler *
     _GetADCReaderInstance *
     _GetTimeSystemInstance *
     _NewSensor *
       _GetTimeSystemInstance
     _TMR1_SetInterruptHandler *
     _init *
     _sensorTasks *

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
     Absolute function(Fake) *
     _ADC_DefaultInterruptHandler *
     _read *
       _ADC_GetConversionResult *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
       _incCurrentTimeMillis *
     _TMR1_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      4       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      24       7       45.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      7F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      7F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Oct 28 11:03:18 2021

                                      l25 038A                                        l53 03CE  
                                      l81 042C                                       l134 0374  
                                     l218 043B                                       l307 039D  
                                     l317 0439                                       l167 0426  
                                     l191 03BE                                       l272 01B0  
                                     l194 0414                                       l274 01CD  
                                     l268 015A                                       l197 0436  
                                     l293 02D6                                       l298 030C  
                                     u500 02B5                                       u501 02B4  
                                     u510 007A                                       u440 02E8  
                                     u520 0098                                       u505 02B1  
                                     u450 0308                                       u530 00F9  
                                     u531 00F8                                       u460 01E0  
                                     u540 00FE                                       u461 01DF  
                                     u541 00FD                                       u470 0200  
                                     u550 015A                                       u471 01FF  
                                     u551 0159                                       u480 027A  
                                     u560 01B0                                       u481 0279  
                                     u465 01DC                                       u561 01AF  
                                     u490 029A                                       u491 0299  
                                     u475 01FC                                       u485 0276  
                                     u495 0296                                       _adc 0073  
                         _timer1ReloadVal 006C                           __end_of_ADC_ISR 03DD  
         __end_of_ADC_SetInterruptHandler 042D                                       wreg 0009  
            ?_ADC_DefaultInterruptHandler 0076                       i1_ADC_SelectChannel 0000  
                                    l1601 0411                                      l1603 0412  
                                    l1611 02EC                                      l1605 0433  
                                    l1621 02FD                                      l1613 02ED  
                                    l1701 010D                                      l1623 02FE  
                                    l1615 02F1                                      l1607 02D7  
                                    l1631 01CE                                      l1703 0113  
                                    l1617 02F5                                      l1609 02DE  
                                    l1801 02CB                                      l1641 01EE  
                                    l1633 01CF                                      l1705 015C  
                                    l1713 01B3                                      l1721 0403  
                                    l1555 0427                                      l1571 0380  
                                    l1563 0375                                      l1627 038B  
                                    l1619 02F9                                      l1651 0281  
                                    l1643 0200                                      l1635 01E0  
                                    l1707 0161                                      l1723 0406  
                                    l1581 03C6                                      l1573 0385  
                                    l1565 0378                                      l1557 0421  
                                    l1661 02B5                                      l1653 0288  
                                    l1645 0205                                      l1637 01E7  
                                    l1709 0169                                      l1725 0407  
                                    l1575 03BF                                      l1567 037B  
                                    l1591 0363                                      l1583 035C  
                                    l1559 043A                                      l1671 0437  
                                    l1663 02BA                                      l1655 029A  
                                    l1647 0211                                      l1727 0408  
                                    l1577 03C3                                      l1569 037D  
                                    l1593 0367                                      l1585 035E  
                                    l1673 03AF                                      l1657 029F  
                                    l1649 027A                                      l1665 02BF  
                                    l1681 005F                                      l1579 03C5  
                                    l1595 0369                                      l1587 0360  
                                    l1659 02A3                                      l1691 00F3  
                                    l1683 007E                                      l1675 004C  
                                    l1597 0371                                      l1589 0362  
                                    l1693 00F9                                      l1685 009C  
                                    l1677 004D                                      l1599 040E  
                                    l1695 00FE                                      l1687 00C6  
                                    l1679 0054                                      l1697 0104  
                                    l1689 00C9                                      l1699 010B  
                                    l1799 01BC                                      _LATA 010C  
                                    _LATC 010E                                      i1l65 0432  
                                    i1l84 043E                                      i1l78 03DC  
                                    _WPUA 020C                                      _WPUC 020E  
                                    _main 0403                                      _init 0437  
                                    _read 030D                                      _self 004F  
                                    fsr0h 0005                                      fsr1h 0007  
                                    indf0 0000                                      fsr0l 0004  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                                      start 0028  
              ??_TMR1_SetInterruptHandler 0022            __size_of_OSCILLATOR_Initialize 0007  
           __end_of_OSCILLATOR_Initialize 0415                                     ?_main 0076  
                                   ?_init 0076                                     ?_read 0076  
                                   _T1CON 0018                                     i1l100 0018  
                                   i1l101 0026                                     i1l105 0026  
                                   i1l221 0402                                     i1l160 03E9  
                                   i1l314 0340                                     i1l170 043D  
                                   i1l164 03F6                                     i1l148 03AE  
                                   u23_20 03A3                                     u23_21 03A2  
                                   u32_20 03D7                                     u24_20 03F1  
                                   u40_20 000F                                     u32_21 03D6  
                                   u24_21 03F0                                     u40_21 000E  
                                   u41_20 0014                                     u41_21 0013  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   u42_20 001D                                     u42_21 001C  
                                   u43_20 0022                                     u43_21 0021  
                                   u39_20 000A                                     u39_21 0009  
                                   _TRISA 008C                                     _TRISC 008E  
        __size_of_ADC_GetConversionResult 0006                          __end_of_TMR1_ISR 03EA  
                          _WDT_Initialize 0433                                     _tasks 004C  
                                   _timer 0074                                     _state 0075  
                 __end_of_TMR1_Initialize 0375                                     pclath 000A  
                                   status 0003                                     wtemp0 007E  
                         _TMR1_WriteTimer 039E                      _GetADCReaderInstance 038B  
                         __initialization 002A                              __end_of_main 040E  
                            __end_of_init 043A                              __end_of_read 0341  
                               ??_ADC_ISR 007A               ?_INTERRUPT_InterruptManager 0076  
            __end_of_incCurrentTimeMillis 0403                                    ??_main 004F  
                                  ??_init 0020                                    ??_read 0078  
                             NewSensor@ti 0020                               NewSensor@tl 0024  
                             NewSensor@ss 002D                               NewSensor@tt 0022  
                  __end_of_WDT_Initialize 0437                                    _ADCON0 009D  
                                  _ADCON1 009E                         _temperatureSensor 00B8  
                                  _ADRESH 009C                                    _ADRESL 009B  
                                  ?_tasks 0076                                    _ANSELA 018C  
                                  _ANSELC 018E                                    _BORCON 0116  
                                  _T1GCON 0019                   TMR1_WriteTimer@timerVal 0076  
                                  i1l1311 03A8                                    i1l1303 039E  
                                  i1l1305 03A3                                    i1l1313 03AA  
                                  i1l1315 03AC                                    i1l1307 03A4  
                                  i1l1411 03DD                                    i1l1405 03CF  
                                  i1l1317 03EA                                    i1l1309 03A6  
                                  i1l1413 03DF                                    i1l1407 03D1  
                                  i1l1319 03F1                                    i1l1409 03D7  
                                  i1l1267 042D                                    i1l1277 03F7  
                                  i1l1391 031F                                    i1l1471 001D  
                                  i1l1463 0006                                    i1l1393 032D  
                                  i1l1385 030D                                    i1l1473 0022  
                                  i1l1465 000A                                    i1l1803 0338  
                                  i1l1387 030E                                    i1l1467 000F  
                                  i1l1389 031C                                    i1l1397 032F  
                                  i1l1469 0014                                    _OSCCON 0099  
                                  _WDTCON 0097                        __size_of_NewSensor 0036  
                   ?_GetADCReaderInstance 0020      __end_of_TMR1_DefaultInterruptHandler 043E  
   __size_of_TMR1_DefaultInterruptHandler 0001              _TMR1_DefaultInterruptHandler 043D  
    __size_of_ADC_DefaultInterruptHandler 0001          __size_of_ADC_SetInterruptHandler 0006  
                            ?_sensorTasks 0020                              __pdataCOMMON 007A  
                         ?_WDT_Initialize 0076  TMR1_SetInterruptHandler@InterruptHandler 0020  
 ADC_SetInterruptHandler@InterruptHandler 0020                   __end_of_TMR1_WriteTimer 03AF  
                   __end_of_TMR1_CallBack 03F7                          ?_TMR1_Initialize 0076  
                       _SYSTEM_Initialize 03AF                   __end_of__initialization 0048  
                      ?_SYSTEM_Initialize 0076            GetADCReaderInstance@setChannel 0022  
                          __pcstackCOMMON 0076                              __pidataBANK0 0341  
                     ??_SYSTEM_Initialize 0022                                 ?_TMR1_ISR 0076  
           ?_TMR1_DefaultInterruptHandler 0076                             __end_of_tasks 01CE  
               GetADCReaderInstance@start 0024                   _ADC_GetConversionResult 042D  
                          _OPTION_REGbits 0095                         __end_of_NewSensor 030D  
                            NewSensor@F69 00A0                 __end_of_SYSTEM_Initialize 03BF  
                                 ??_tasks 003F                                __pbssBANK1 00A0  
                    _incCurrentTimeMillis 03F7                    ??_GetADCReaderInstance 0028  
                   _GetTimeSystemInstance 043A                                __pmaintext 0403  
                              ??_TMR1_ISR 0078                                __pintentry 0004  
                                 _ADC_ISR 03CF                                   _APFCON0 011D  
                                 _APFCON1 011E                   __size_of_ADC_Initialize 0010  
                                 _OSCTUNE 0098                          ?_TMR1_WriteTimer 0076  
                   ?_incCurrentTimeMillis 0076                                _cronometer 0070  
                    _ADC_InterruptHandler 006E                   _ADC_SetInterruptHandler 0427  
               ??_ADC_GetConversionResult 0078                                   __ptext1 004C  
                                 __ptext2 01CE                                   __ptext3 0437  
                                 __ptext4 02D7                                   __ptext5 043A  
                                 __ptext6 038B                                   __ptext7 03AF  
                                 __ptext8 0433                                   __ptext9 035C  
          ??_TMR1_DefaultInterruptHandler 0076                                 _T1CONbits 0018  
                   _OSCILLATOR_Initialize 040E                      __size_of_sensorTasks 0109  
       __size_of_TMR1_SetInterruptHandler 0006                  ??_PIN_MANAGER_Initialize 0020  
               ?_TMR1_SetInterruptHandler 0020                __size_of_SYSTEM_Initialize 0010  
                                 clrloop0 041C                      end_of_initialization 0048  
                                 init_ram 0415                    ?_GetTimeSystemInstance 0076  
                                 initloop 0416                          ??_WDT_Initialize 0020  
     __end_of_ADC_DefaultInterruptHandler 043F               _ADC_DefaultInterruptHandler 043E  
                     _ADC_StartConversion 0000                    ??_incCurrentTimeMillis 0076  
           ??_ADC_DefaultInterruptHandler 0076                 ??_ADC_SetInterruptHandler 0022  
                           __pidataCOMMON 043C                         __size_of_TMR1_ISR 000D  
                          _ADC_Initialize 03BF                    ?_OSCILLATOR_Initialize 0076  
                     start_initialization 002A           __size_of_PIN_MANAGER_Initialize 0016  
                               _NewSensor 02D7                  __size_of_TMR1_Initialize 0019  
                         sensorTasks@this 0020                    __end_of_ADC_Initialize 03CF  
                             __pdataBANK0 004F                                  ?_ADC_ISR 0076  
                  __size_of_TMR1_CallBack 000D                               __pbssCOMMON 0070  
                               ___latbits 0002                             __pcstackBANK0 0020  
                              ?_NewSensor 0020                         _timer@Sensor$F674 0072  
                     sensorTasks@meassure 0021                                 __pnvBANK0 006A  
                               _ampSensor 00AC                    _PIN_MANAGER_Initialize 0375  
           __size_of_GetADCReaderInstance 0013                         _ADC_SelectChannel 0000  
                 GetADCReaderInstance@amC 0027          __end_of_TMR1_SetInterruptHandler 0427  
                 GetADCReaderInstance@teC 0026                           ?_ADC_Initialize 0076  
            ??_INTERRUPT_InterruptManager 007A                   ??_GetTimeSystemInstance 0020  
                          __size_of_tasks 0182                             _TMR1_CallBack 03EA  
                                _LATCbits 010E                                 clear_ram0 041B  
                                _PIE1bits 0091                  __size_of_TMR1_WriteTimer 0011  
     __size_of_INTERRUPT_InterruptManager 0024                                  _PIR1bits 0011  
                                _TMR1_ISR 03DD                         ??_TMR1_Initialize 0022  
                        __size_of_ADC_ISR 000E                             ??_sensorTasks 0023  
                              _ADCON0bits 009D                               ??_NewSensor 002C  
                          ?_TMR1_CallBack 0076             GetADCReaderInstance@getResult 0020  
                ?_ADC_GetConversionResult 0076                   ??_OSCILLATOR_Initialize 0020  
                _TMR1_SetInterruptHandler 0421                     _TMR1_InterruptHandler 006A  
                     __end_of_sensorTasks 02D7                                  __ptext10 0421  
                                __ptext11 0375                                  __ptext20 03F7  
                                __ptext12 040E                                  __ptext21 03CF  
                                __ptext13 03BF                                _T1GCONbits 0019  
                                __ptext22 043E                                  __ptext14 0427  
                                __ptext23 030D                                  __ptext24 042D  
                                __ptext16 03DD                                  __ptext17 039E  
                                __ptext18 03EA                                  __ptext19 043D  
                           __size_of_main 000B             __size_of_incCurrentTimeMillis 000C  
                           __size_of_init 0003                             __size_of_read 0034  
                                _instance 0060                                  int$flags 007E  
      __end_of_INTERRUPT_InterruptManager 0028                _INTERRUPT_InterruptManager 0004  
                       ??_TMR1_WriteTimer 0078                                _INTCONbits 000B  
                         ??_TMR1_CallBack 0076                  ?_ADC_SetInterruptHandler 0020  
                 __size_of_WDT_Initialize 0004                                  intlevel1 0000  
                 ?_PIN_MANAGER_Initialize 0076           __end_of_ADC_GetConversionResult 0433  
                        ??_ADC_Initialize 0022                               _sensorTasks 01CE  
                           _isReadingTemp 007A              __end_of_GetADCReaderInstance 039E  
          __end_of_PIN_MANAGER_Initialize 038B            __size_of_GetTimeSystemInstance 0002  
           __end_of_GetTimeSystemInstance 043C                           _TMR1_Initialize 035C  
